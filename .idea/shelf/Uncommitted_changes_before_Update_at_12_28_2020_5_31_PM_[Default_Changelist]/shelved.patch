Index: app/src/main/java/com/example/pabs/Fragments/EventFragment/EventToDoFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments.EventFragment;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\n\r\nimport com.example.pabs.Adapters.EventTodoRecyclerViewAdapter;\r\nimport com.example.pabs.Fragments.AddTaskDialogFragment;\r\nimport com.example.pabs.Models.TaskList;\r\nimport com.example.pabs.Models.ToDoList;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class EventToDoFragment extends Fragment implements AddTaskDialogFragment.AddTaskDialogListener {\r\n\r\n    private String uID;\r\n    private View listView;\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n    private String EventID;\r\n\r\n    //dialog fragment\r\n    private String task_text;\r\n\r\n    //Event object\r\n    DatabaseEvent event_obj;\r\n\r\n    ToDoList tD;\r\n\r\n    EventTodoRecyclerViewAdapter parentItemAdapter;\r\n    public void setEventID(String id){\r\n        EventID = id;\r\n    }\r\n\r\n    public EventToDoFragment(DatabaseEvent event) {\r\n        this.event_obj = event;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        uID = getActivity().getIntent().getStringExtra(\"USER\");\r\n        Log.d(\"EventId\", \"onCreateView: \" + EventID);\r\n        // Inflate the layout for this fragment\r\n        View myToDoview = inflater.inflate(R.layout.fragment_event_todo, container, false);\r\n\r\n        listView = getActivity().findViewById(R.id.activity_event_layout);\r\n        List<TaskList> tasks = new ArrayList<>();\r\n\r\n        final RecyclerView RecyclerViewItem = myToDoview.findViewById(R.id.ev_todo_rec_view);\r\n\r\n        // Initialise the Linear layout manager\r\n        final LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\r\n\r\n        //set data for events example\r\n\r\n        DatabaseReference referenceEvent = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n        referenceEvent.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for(DataSnapshot event : snapshot.getChildren()){\r\n                    if(event.child(\"event_name\").getValue() != null) {\r\n                        if (event.child(\"event_name\").getValue().toString().equals(event_obj.getEvent_name())){\r\n                           //setEventID(event.getKey());\r\n                            //firebase database -> get reference to TODO table\r\n                            EventID = event.getKey();\r\n                            reference = FirebaseDatabase.getInstance().getReference().child(\"TODO\").child(EventID);\r\n                            //databaseEvents.addValueEventListener(new ValueEventListener() {\r\n                            reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    for (final DataSnapshot todo : snapshot.getChildren()) {\r\n                                        if (!todo.getKey().equals(\"Type\")) {\r\n                                            final ToDoList tempTD = new ToDoList();\r\n\r\n                                            //Loop 1 to go through all child nodes of events\r\n                                            final List<TaskList> tasks = new ArrayList<>();\r\n                                            todo.getRef().child(\"taskList\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                @Override\r\n                                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                    for (DataSnapshot task : snapshot.getChildren()) {\r\n                                                        //Loop 1 to go through all child nodes of joined members\r\n                                                            TaskList task_temp = new TaskList();\r\n                                                            task_temp.setBelongTo(task.child(\"belongTo\").getValue().toString());\r\n                                                            task_temp.setTaskTitle(task.child(\"taskTitle\").getValue().toString());\r\n                                                            String CB = task.child(\"taskCB\").getValue().toString();\r\n                                                            boolean cb = false;\r\n                                                            if (CB.equals(\"true\")) {\r\n                                                                cb = true;\r\n                                                                Log.d(\"Espania\", \"onDataChange: Ifben vagyok! \" + cb);\r\n                                                            }\r\n                                                            task_temp.setTaskCB(cb);\r\n                                                            tasks.add(task_temp);\r\n                                                    }\r\n\r\n\r\n                                                    final Handler handler = new Handler();\r\n                                                    final int delay = 1000; //milliseconds\r\n\r\n                                                    Log.d(\"WTF\", \"run: Here is Jimmi!\" + tasks.size());\r\n                                                    handler.postDelayed(new Runnable() {\r\n                                                        public void run() {\r\n                                                            if (!tasks.isEmpty())//checking if the data is loaded or not\r\n                                                            {\r\n                                                                Log.d(\"WTF\", \"run: Here is Johnny!\");\r\n                                                                String td_title = todo.child(\"toDoListTitle\").getValue().toString();\r\n                                                                tempTD.setToDoListTitle(td_title);\r\n                                                                String td_owner = todo.child(\"owner\").getValue().toString();\r\n                                                                tempTD.setOwner(td_owner);\r\n\r\n                                                                tempTD.setTaskList(tasks);\r\n\r\n                                                                tD = tempTD;\r\n\r\n                                                                // Pass the arguments\r\n                                                                // to the parentItemAdapter.\r\n                                                                // These arguments are passed\r\n                                                                // using a method ParentItemList()\r\n                                                                parentItemAdapter = new EventTodoRecyclerViewAdapter(tasks,EventID);\r\n                                                                // Set the layout manager\r\n                                                                // and adapter for items\r\n                                                                // of the parent recyclerview\r\n                                                                RecyclerViewItem.setAdapter(parentItemAdapter);\r\n                                                                RecyclerViewItem.setLayoutManager(layoutManager);\r\n                                                            } else\r\n                                                                handler.postDelayed(this, delay);\r\n                                                        }\r\n                                                    }, delay);\r\n\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                }\r\n                                            });\r\n\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        Button todo_btn = myToDoview.findViewById(R.id.ev_todo_button);\r\n        todo_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                inviteDialogFragment();\r\n                parentItemAdapter.notifyDataSetChanged();\r\n                Log.d(\"Espania\", \"onClick: Heyho\");\r\n            }\r\n        });\r\n        return myToDoview;\r\n    }\r\n\r\n    private void pushInMyToDoList(final DatabaseReference reference){\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for(DataSnapshot todo: snapshot.getChildren()) {\r\n                    if(!todo.getKey().equals(\"Type\")) {\r\n                        todo.child(\"taskList\").getRef().push().setValue(new TaskList(task_text, uID, todo.getKey()));\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        listView.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        listView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    @Override\r\n    public void applyText(String taskname) {\r\n        task_text = taskname;\r\n        Log.d(\"Espania\", \"applyText: \" + reference);\r\n        pushInMyToDoList(reference);\r\n    }\r\n\r\n    public void inviteDialogFragment(){\r\n        AddTaskDialogFragment addTaskDialogFragment = new AddTaskDialogFragment();\r\n        addTaskDialogFragment.setListener(EventToDoFragment.this);\r\n        addTaskDialogFragment.setCancelable(true);\r\n        addTaskDialogFragment.show(getActivity().getSupportFragmentManager(),\"AddTaskDialogFragment\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/EventFragment/EventToDoFragment.java	(revision cb9ae4c46633ab7d5849c34714ce24a0d913b1b5)
+++ app/src/main/java/com/example/pabs/Fragments/EventFragment/EventToDoFragment.java	(date 1609168986997)
@@ -183,8 +183,6 @@
             @Override
             public void onClick(View v) {
                 inviteDialogFragment();
-                parentItemAdapter.notifyDataSetChanged();
-                Log.d("Espania", "onClick: Heyho");
             }
         });
         return myToDoview;
Index: app/src/main/java/com/example/pabs/Adapters/EventTodoRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.Models.TaskList;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.List;\r\n\r\nimport static com.facebook.FacebookSdk.getApplicationContext;\r\n\r\n/**\r\n * Creates an array of card elements\r\n */\r\n\r\npublic class EventTodoRecyclerViewAdapter extends RecyclerView.Adapter<EventTodoRecyclerViewAdapter.ViewHolder> {\r\n\r\n    //Store a member variable for the events\r\n    private final List<TaskList> tasks;\r\n    private final String eventID;\r\n\r\n    //Pass-in the contact array into the constructor\r\n    public EventTodoRecyclerViewAdapter(List<TaskList> lstTask, String eventid) {\r\n        tasks = lstTask;\r\n        eventID = eventid;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        Context context = parent.getContext();\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n\r\n        //inflate custom layout\r\n        View eventtodo_listview = inflater.inflate(R.layout.fragment_event_todo_listrow, parent, false);\r\n        //Return a new holder instance\r\n        ViewHolder viewHolder = new ViewHolder(eventtodo_listview);\r\n        return viewHolder;\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final ViewHolder holder, int position) {\r\n        //reference to database\r\n        final DatabaseReference referenceDB = FirebaseDatabase.getInstance().getReference().child(\"TODO\").child(eventID);\r\n\r\n        //Get the data model based on position\r\n        final TaskList task = tasks.get(position);\r\n\r\n        //set item views based on views and data model\r\n        TextView textView = holder.task_textview;\r\n        textView.setText(task.getTaskTitle());\r\n        //Waits for delete button to be clicked\r\n        Button delete = holder.delete_btn;\r\n        delete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Log.d(\"Taskrow\", \"Delete button clikced\");\r\n            }\r\n        });\r\n        //Waits for pick task button to be clicked\r\n        Button pick = holder.pick_btn;\r\n        pick.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Log.d(\"Taskrow\", \"PickTask button clikced\");\r\n            }\r\n        });\r\n        //Waits for checkbox to be checked or unchecked\r\n        CheckBox cb = holder.ev_todo_cb;\r\n        if(task.getTaskCB()){\r\n            holder.ev_todo_cb.setChecked(true);\r\n        }\r\n        else{\r\n            holder.ev_todo_cb.setChecked(false);\r\n        }\r\n\r\n        cb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, final boolean isChecked) {\r\n                task.setTaskCB(isChecked);\r\n                referenceDB.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for(DataSnapshot todo : snapshot.getChildren()){\r\n                            if(!todo.getKey().equals(\"Type\")){\r\n                                todo.getRef().child(\"taskList\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                        for(DataSnapshot tasks : snapshot.getChildren()){\r\n                                            if(tasks.child(\"taskTitle\").getValue().toString().equals(task.getTaskTitle())){\r\n                                                tasks.child(\"taskCB\").getRef().setValue(isChecked);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return tasks.size();\r\n    }\r\n\r\n    // Provide a direct reference to each of the views within a data item\r\n    // Used to cache the views within the item layout for fast access\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        // Your holder should contain a member variable\r\n        // for any view that will be set as you render a row\r\n        public TextView task_textview;\r\n        public Button delete_btn;\r\n        public Button pick_btn;\r\n        public CheckBox ev_todo_cb;\r\n\r\n        // We also create a constructor that accepts the entire item row\r\n        // and does the view lookups to find each subview\r\n        public ViewHolder(View itemView) {\r\n            // Stores the itemView in a public final member variable that can be used\r\n            // to access the context from any ViewHolder instance.\r\n            super(itemView);\r\n\r\n            task_textview = (TextView) itemView.findViewById(R.id.ev_rec_task);\r\n            delete_btn = (Button) itemView.findViewById(R.id.ev_todo_delete_btn);\r\n            pick_btn = (Button) itemView.findViewById(R.id.ev_todo_import_btn);\r\n            ev_todo_cb = (CheckBox) itemView.findViewById(R.id.ev_todo_cb);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Adapters/EventTodoRecyclerViewAdapter.java	(revision cb9ae4c46633ab7d5849c34714ce24a0d913b1b5)
+++ app/src/main/java/com/example/pabs/Adapters/EventTodoRecyclerViewAdapter.java	(date 1609112540232)
@@ -71,7 +71,37 @@
         delete.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Log.d("Taskrow", "Delete button clikced");
+                referenceDB.addListenerForSingleValueEvent(new ValueEventListener() {
+                    @Override
+                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                        for(DataSnapshot todo : snapshot.getChildren()){
+                            if(!todo.getKey().equals("Type")){
+                                todo.getRef().child("taskList").addListenerForSingleValueEvent(new ValueEventListener() {
+                                    @Override
+                                    public void onDataChange(@NonNull DataSnapshot tk) {
+                                        for(DataSnapshot t : tk.getChildren()){
+                                            if(t.child("taskTitle").getValue(String.class).equals(task.getTaskTitle())){
+                                                t.getRef().removeValue();
+                                                tasks.remove(task);
+                                                notifyDataSetChanged();
+                                            }
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onCancelled(@NonNull DatabaseError error) {
+
+                                    }
+                                });
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void onCancelled(@NonNull DatabaseError error) {
+
+                    }
+                });
             }
         });
         //Waits for pick task button to be clicked
Index: app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Adapters;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.Models.ToDoList;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Creates an array of card elements\r\n */\r\n\r\npublic class ToDoRecyclerViewAdapter extends RecyclerView.Adapter<ToDoRecyclerViewAdapter.MyToDoViewHolder>{\r\n\r\n    private final RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool();\r\n    private final List<ToDoList> toDoList;\r\n    private final String uID;\r\n\r\n    public ToDoRecyclerViewAdapter(List<ToDoList> toDoList, String uid) {\r\n        this.toDoList = toDoList;\r\n        this.uID = uid;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyToDoViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i)\r\n    {\r\n        // Here we inflate the corresponding\r\n        // layout of the parent item\r\n        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.mytodo_list_row, viewGroup, false);\r\n\r\n        return new MyToDoViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final MyToDoViewHolder parentViewHolder, int position)\r\n    {\r\n        //firebase\r\n        final DatabaseReference referenceDB = FirebaseDatabase.getInstance().getReference().child(\"TODO\").child(uID);\r\n\r\n        // Create an instance of the ParentItem\r\n        // class for the given position\r\n        ToDoList todolist = toDoList.get(position);\r\n\r\n        // For the created instance,\r\n        // get the title and set it\r\n        // as the text for the TextView\r\n        parentViewHolder.toDoListTitle.setText(todolist.getToDoListTitle());\r\n        parentViewHolder.delete_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                referenceDB.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        int i=0;\r\n                        for(DataSnapshot todo : snapshot.getChildren()){\r\n                            if(i == parentViewHolder.getAdapterPosition()){\r\n                               todo.getRef().child(\"taskList\").removeValue();\r\n                            }\r\n                            ++i;\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Create a layout manager\r\n        // to assign a layout\r\n        // to the RecyclerView.\r\n\r\n        // Here we have assigned the layout\r\n        // as LinearLayout with vertical orientation\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(parentViewHolder.childRecyclerView.getContext(), LinearLayoutManager.VERTICAL, false);\r\n\r\n        // Since this is a nested layout, so\r\n        // to define how many child items\r\n        // should be prefetched when the\r\n        // child RecyclerView is nested\r\n        // inside the parent RecyclerView,\r\n        // we use the following method\r\n        layoutManager.setInitialPrefetchItemCount(todolist.getTaskList().size());\r\n\r\n        // Create an instance of the child\r\n        // item view adapter and set its\r\n        // adapter, layout manager and RecyclerViewPool\r\n        TaskRecyclerViewAdapter childItemAdapter = new TaskRecyclerViewAdapter(todolist.getTaskList(), uID);\r\n        parentViewHolder.childRecyclerView.setLayoutManager(layoutManager);\r\n        parentViewHolder.childRecyclerView.setAdapter(childItemAdapter);\r\n        parentViewHolder.childRecyclerView.setRecycledViewPool(viewPool);\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return toDoList.size();\r\n    }\r\n\r\n    // This class is to initialize\r\n    // the Views present in\r\n    // the parent RecyclerView\r\n    class MyToDoViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private final TextView toDoListTitle;\r\n        private final Button delete_btn;\r\n        private final RecyclerView childRecyclerView;\r\n\r\n        MyToDoViewHolder(final View itemView)\r\n        {\r\n            super(itemView);\r\n\r\n            toDoListTitle = itemView.findViewById(R.id.belong);\r\n            delete_btn = itemView.findViewById(R.id.todo_delete_btn);\r\n            childRecyclerView = itemView.findViewById(R.id.task_list);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java	(revision cb9ae4c46633ab7d5849c34714ce24a0d913b1b5)
+++ app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java	(date 1609112702001)
@@ -54,7 +54,7 @@
 
         // Create an instance of the ParentItem
         // class for the given position
-        ToDoList todolist = toDoList.get(position);
+        final ToDoList todolist = toDoList.get(position);
 
         // For the created instance,
         // get the title and set it
@@ -70,6 +70,8 @@
                         for(DataSnapshot todo : snapshot.getChildren()){
                             if(i == parentViewHolder.getAdapterPosition()){
                                todo.getRef().child("taskList").removeValue();
+                               toDoList.remove(todolist);
+                               notifyDataSetChanged();
                             }
                             ++i;
                         }
Index: app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\n\r\nimport com.example.pabs.Adapters.ToDoRecyclerViewAdapter;\r\nimport com.example.pabs.Models.TaskList;\r\nimport com.example.pabs.Models.ToDoList;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MyToDoFragment extends Fragment implements AddTaskDialogFragment.AddTaskDialogListener {\r\n\r\n    private View listView;\r\n    List<ToDoList> itemList;\r\n    List<ToDoList> lstToDo;\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n    private String uID;\r\n\r\n    //dialog fragment\r\n    private String task_text;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        //get uid of logged in user\r\n        uID = getActivity().getIntent().getStringExtra(\"USER\");\r\n\r\n        // Inflate the layout for this fragment\r\n        View myToDoview = inflater.inflate(R.layout.fragment_my_to_do, container, false);\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"TODO\").child(uID);\r\n\r\n        listView = getActivity().findViewById(R.id.activity_event_layout);\r\n        itemList = new ArrayList<>();\r\n        List<TaskList> tasks = new ArrayList<>();\r\n        ToDoList mytodos = new ToDoList(\"My ToDos\", tasks, uID, \"\");\r\n        itemList.add(mytodos);\r\n        final RecyclerView ParentRecyclerViewItem = myToDoview.findViewById(R.id.todo_rec_view);\r\n\r\n        // Initialise the Linear layout manager\r\n        final LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\r\n\r\n        //set data for events example\r\n        lstToDo = new ArrayList<>();\r\n\r\n        //Getting events from database and setting them to recyclerview\r\n        final DatabaseReference databaseTodoRef;\r\n        databaseTodoRef= FirebaseDatabase.getInstance().getReference().child(\"TODO\").child(uID);\r\n\r\n        //databaseEvents.addValueEventListener(new ValueEventListener() {\r\n        databaseTodoRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                lstToDo.clear();\r\n                for (final DataSnapshot todo : snapshot.getChildren()) {\r\n                    final ToDoList tempTD = new ToDoList();\r\n\r\n                    //Loop 1 to go through all child nodes of events\r\n                    final List<TaskList> tasks =  new ArrayList<>();\r\n                    todo.getRef().child(\"taskList\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                            for (DataSnapshot task : snapshot.getChildren()) {\r\n                                //Loop 1 to go through all child nodes of joined members\r\n                                if(!task.getValue().equals(\"Type\")){\r\n                                    TaskList task_temp = new TaskList();\r\n                                    task_temp.setBelongTo(task.child(\"belongTo\").getValue().toString());\r\n                                    task_temp.setTaskTitle(task.child(\"taskTitle\").getValue().toString());\r\n                                    String CB = task.child(\"taskCB\").getValue().toString();\r\n                                    boolean cb = false;\r\n                                    if(CB.equals(\"true\")){\r\n                                        cb = true;\r\n                                        Log.d(\"Espania\", \"onDataChange: Ifben vagyok! \" + cb);\r\n                                    }\r\n                                    task_temp.setTaskCB(cb);\r\n                                    tasks.add(task_temp);\r\n                                }\r\n                            }\r\n\r\n\r\n                            final Handler handler = new Handler();\r\n                            final int delay = 1000; //milliseconds\r\n\r\n                            Log.d(\"WTF\", \"run: Here is Jimmi!\" + tasks.size());\r\n                            handler.postDelayed(new Runnable(){\r\n                                public void run(){\r\n                                    if(!tasks.isEmpty())//checking if the data is loaded or not\r\n                                    {\r\n                                        Log.d(\"WTF\", \"run: Here is Johnny!\");\r\n                                        String td_title = todo.child(\"toDoListTitle\").getValue().toString();\r\n                                        tempTD.setToDoListTitle(td_title);\r\n                                        String td_owner = todo.child(\"owner\").getValue().toString();\r\n                                        tempTD.setOwner(td_owner);\r\n\r\n                                        tempTD.setTaskList(tasks);\r\n\r\n\r\n                                        //pushing the temporary event object into an arraylist\r\n                                        lstToDo.add(tempTD);\r\n                                        // Pass the arguments\r\n                                        // to the parentItemAdapter.\r\n                                        // These arguments are passed\r\n                                        // using a method ParentItemList()\r\n                                        ToDoRecyclerViewAdapter parentItemAdapter = new ToDoRecyclerViewAdapter(lstToDo,uID);\r\n\r\n                                        // Set the layout manager\r\n                                        // and adapter for items\r\n                                        // of the parent recyclerview\r\n                                        ParentRecyclerViewItem.setAdapter(parentItemAdapter);\r\n                                        ParentRecyclerViewItem.setLayoutManager(layoutManager);\r\n                                    }\r\n                                    else\r\n                                        handler.postDelayed(this, delay);\r\n                                }\r\n                            }, delay);\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n        Button todo_btn = myToDoview.findViewById(R.id.todo_button);\r\n        todo_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                inviteDialogFragment();\r\n                Log.d(\"Espania\", \"onClick: Heyho\");\r\n            }\r\n        });\r\n        return myToDoview;\r\n    }\r\n\r\n    private void pushInMyToDoList(final DatabaseReference reference){\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            int ok = 0;\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for(DataSnapshot todo: snapshot.getChildren()) {\r\n                    if (todo.child(\"toDoListTitle\").getValue() != null) {\r\n                        if (todo.child(\"toDoListTitle\").getValue().toString().equals(\"My ToDos\")) {\r\n                            ok = 1;\r\n                            if (todo.child(\"ID\").getValue() == null) {\r\n                                todo.child(\"ID\").getRef().setValue(todo.getKey());\r\n                            }\r\n                            todo.child(\"taskList\").getRef().push().setValue(new TaskList(task_text, uID, todo.getKey()));\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        listView.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        listView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    @Override\r\n    public void applyText(String taskname) {\r\n        task_text = taskname;\r\n        Log.d(\"Espania\", \"applyText: \" + reference);\r\n        pushInMyToDoList(reference);\r\n    }\r\n\r\n    public void inviteDialogFragment(){\r\n        AddTaskDialogFragment addTaskDialogFragment = new AddTaskDialogFragment();\r\n        addTaskDialogFragment.setListener(MyToDoFragment.this);\r\n        addTaskDialogFragment.setCancelable(true);\r\n        addTaskDialogFragment.show(getActivity().getSupportFragmentManager(),\"AddTaskDialogFragment\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java	(revision cb9ae4c46633ab7d5849c34714ce24a0d913b1b5)
+++ app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java	(date 1609113496399)
@@ -39,6 +39,9 @@
     //dialog fragment
     private String task_text;
 
+    //RecyclerView
+    ToDoRecyclerViewAdapter parentItemAdapter;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -126,7 +129,7 @@
                                         // to the parentItemAdapter.
                                         // These arguments are passed
                                         // using a method ParentItemList()
-                                        ToDoRecyclerViewAdapter parentItemAdapter = new ToDoRecyclerViewAdapter(lstToDo,uID);
+                                        parentItemAdapter = new ToDoRecyclerViewAdapter(lstToDo,uID);
 
                                         // Set the layout manager
                                         // and adapter for items
@@ -163,7 +166,6 @@
             @Override
             public void onClick(View v) {
                 inviteDialogFragment();
-                Log.d("Espania", "onClick: Heyho");
             }
         });
         return myToDoview;
@@ -171,16 +173,11 @@
 
     private void pushInMyToDoList(final DatabaseReference reference){
         reference.addListenerForSingleValueEvent(new ValueEventListener() {
-            int ok = 0;
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
                 for(DataSnapshot todo: snapshot.getChildren()) {
                     if (todo.child("toDoListTitle").getValue() != null) {
                         if (todo.child("toDoListTitle").getValue().toString().equals("My ToDos")) {
-                            ok = 1;
-                            if (todo.child("ID").getValue() == null) {
-                                todo.child("ID").getRef().setValue(todo.getKey());
-                            }
                             todo.child("taskList").getRef().push().setValue(new TaskList(task_text, uID, todo.getKey()));
                         }
                     }
