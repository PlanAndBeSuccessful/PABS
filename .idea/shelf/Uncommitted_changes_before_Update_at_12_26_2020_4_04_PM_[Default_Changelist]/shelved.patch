Index: app/src/main/java/com/example/pabs/EventActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.SearchView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Adapters.EventRecyclerViewAdapter;\r\nimport com.example.pabs.Fragments.CalendarFragment;\r\nimport com.example.pabs.Fragments.EventFragment.CreateEventFragment;\r\nimport com.example.pabs.Models.Event;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Main screen, handles more fragments, events, groups\r\n */\r\n\r\npublic class EventActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    //UI\r\n    private ImageView create_event_img_btn;\r\n\r\n    //firebase\r\n    private DatabaseReference reference;\r\n    private String uID;\r\n\r\n    //events\r\n    private List<Event> lstEvent;\r\n    private List<Event> lstEventCopy;\r\n\r\n    //drawer\r\n    private DrawerLayout drawer = null;\r\n    private NavigationView navigationView = null;\r\n\r\n    //\r\n    private SearchView sw;\r\n    private EventRecyclerViewAdapter myAdapter;\r\n\r\n    /**\r\n     * On create\r\n     */\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event);\r\n\r\n        //get uid of logged in user\r\n        uID = getIntent().getStringExtra(\"USER\");\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"USER\");\r\n\r\n        //set data for events example\r\n        lstEvent = new ArrayList<>();\r\n\r\n        //Getting events from database and setting them to recyclerview\r\n        DatabaseReference databaseEvents;\r\n        databaseEvents = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n        databaseEvents.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                clearEvents();\r\n                for (DataSnapshot event : snapshot.getChildren()) {\r\n                    //Loop 1 to go through all child nodes of events\r\n                    String temp = event.child(\"event_name\").getValue().toString();\r\n\r\n                    Uri myUri = null;\r\n                    String UriStr = null;\r\n\r\n                    //if the event has a thumbnail, get Uri\r\n                    if (event.child(\"thumbnail\").getValue() != null) {\r\n                        UriStr = event.child(\"thumbnail\").getValue().toString();\r\n                        myUri = Uri.parse(UriStr);\r\n                    }\r\n\r\n                    //get no image Uri\r\n                    Uri testUri = Uri.parse(\"https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351\");\r\n\r\n                    //Create temporary Event\r\n                    Event tempEv;\r\n\r\n                    //if Event has no thumbnail\r\n                    if (UriStr == null) {\r\n                        //Give the event, the no image thumbnail\r\n                        tempEv = new Event();\r\n                        tempEv.setTitle(temp);\r\n                        tempEv.setThumbnail(testUri);\r\n                    }\r\n                    //if Event has thumbnail\r\n                    else {\r\n                        //Set thumbnail of event\r\n                        tempEv = new Event();\r\n                        tempEv.setTitle(temp);\r\n                        tempEv.setThumbnail(myUri);\r\n                    }\r\n\r\n                    //add events to array\r\n                    addToEventsArray(tempEv);\r\n                }\r\n\r\n                //Set and show events on main screen\r\n                setEvents();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        //nav view and drawer\r\n        navigationView = findViewById(R.id.a_e_nav_view);\r\n        drawer = findViewById(R.id.a_e_drawer_layout);\r\n\r\n        //handle navigation drawer open/close with toggle\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, null, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {\r\n            /**\r\n             * Called when a drawer has settled in a completely closed state.\r\n             */\r\n            public void onDrawerClosed(View view) {\r\n                super.onDrawerClosed(view);\r\n                for (int i = 0; i < navigationView.getMenu().size(); ++i)\r\n                    navigationView.getMenu().getItem(i).setChecked(false);\r\n            }\r\n\r\n            /**\r\n             * Called when a drawer has settled in a completely open state.\r\n             */\r\n            public void onDrawerOpened(View drawerView) {\r\n                super.onDrawerOpened(drawerView);\r\n            }\r\n        };\r\n\r\n        //add toggle to drawer\r\n        drawer.addDrawerListener(toggle);\r\n\r\n        //sync toggle\r\n        toggle.syncState();\r\n\r\n        // Write a string to database when this client loses connection\r\n        reference.child(uID).child(\"online\").onDisconnect().setValue(\"false\");\r\n\r\n        DatabaseReference connectedRef = FirebaseDatabase.getInstance().getReference(\".info/connected\");\r\n        connectedRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot snapshot) {\r\n                boolean connected = snapshot.getValue(Boolean.class);\r\n                if (connected) {\r\n                    //user is connected\r\n                } else {\r\n                    //user disconnected\r\n                    reference.child(uID).child(\"online\").onDisconnect().setValue(\"false\");\r\n                    openLoginActivity();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError error) {\r\n                System.err.println(\"Listener was cancelled\");\r\n            }\r\n        });\r\n\r\n        //create event button\r\n        create_event_img_btn = findViewById(R.id.a_e_create_event_button);\r\n        create_event_img_btn.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    openCreateEventFragment();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        //\r\n\r\n\r\n        //\r\n        sw = findViewById(R.id.e_search_bar);\r\n        sw.setQueryHint(\"Search event name...\");\r\n\r\n        sw.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                myAdapter.filter(query);\r\n                hideKeyboard(EventActivity.this);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                myAdapter.filter(newText);\r\n                return true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public static void hideKeyboard(Activity activity) {\r\n        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);\r\n        //Find the currently focused view, so we can grab the correct window token from it.\r\n        View view = activity.getCurrentFocus();\r\n        //If no view currently has focus, create a new one, just so we can grab a window token from it\r\n        if (view == null) {\r\n            view = new View(activity);\r\n        }\r\n        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n    }\r\n\r\n    private void openLoginActivity(){\r\n        Intent intent = new Intent(this, LoginActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Add to events inside DataChanged method so we don't lose the results\r\n     */\r\n    public void addToEventsArray(Event tempEv){\r\n        lstEvent.add(tempEv);\r\n    }\r\n\r\n    /**\r\n     * Clear events inside DataChanged method\r\n     */\r\n    public void clearEvents(){\r\n        lstEvent.clear();\r\n    }\r\n\r\n    /**\r\n     * Set events inside DataChanged method\r\n     */\r\n    public void setEvents(){\r\n        //create and set RecyclerView\r\n        RecyclerView myRv = (RecyclerView) findViewById(R.id.e_recycler_view);\r\n        //create Adapter with lstEvent in this context\r\n        myAdapter = new EventRecyclerViewAdapter(this, lstEvent, getSupportFragmentManager(), uID);\r\n        //separate the Recyclerview to 3 columns\r\n        myRv.setLayoutManager(new GridLayoutManager(this, 3));\r\n        //set adapter for RecyclerView\r\n        myRv.setAdapter(myAdapter);\r\n    }\r\n\r\n    /**\r\n     * Called on selecting item from navigation list\r\n     */\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()){\r\n            case R.id.nav_events:\r\n                for(int i = 0; i < getSupportFragmentManager().getBackStackEntryCount(); ++i) {\r\n                    getSupportFragmentManager().popBackStack();\r\n                }\r\n                Toast.makeText(this, \"nav_events\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_calendar:\r\n                openCalendarFragment();\r\n                Toast.makeText(this, \"nav_calendar\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_groups:\r\n                Toast.makeText(this, \"nav_groups\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_profile:\r\n                Toast.makeText(this, \"nav_profile\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_settings:\r\n                Toast.makeText(this, \"nav_settings\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_logout:\r\n                Toast.makeText(this, \"nav_logout\", Toast.LENGTH_SHORT).show();\r\n                reference.child(uID).child(\"online\").setValue(\"false\");\r\n                finish();\r\n                break;\r\n\r\n            default:\r\n                Toast.makeText(this, \"error\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n\r\n        //close drawer on item clicked\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * open create event fragment\r\n     */\r\n    private void openCreateEventFragment(){\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new CreateEventFragment(uID))\r\n                .addToBackStack(\"CreateEventFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * open calendar event fragment\r\n     */\r\n    private void openCalendarFragment(){\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new CalendarFragment())\r\n                .addToBackStack(\"CalendarFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * Called when the activity is exiting\r\n     */\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        lstEvent.clear();\r\n        reference.child(uID).child(\"online\").setValue(\"false\");\r\n    }\r\n\r\n    /**\r\n     * Called when the activity started\r\n     */\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/EventActivity.java	(revision 1c731fa6d69cabd215338b35e6b0c1ce7d3a0de7)
+++ app/src/main/java/com/example/pabs/EventActivity.java	(date 1608991353377)
@@ -1,20 +1,10 @@
 package com.example.pabs;
 
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.ActionBarDrawerToggle;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.core.view.GravityCompat;
-import androidx.drawerlayout.widget.DrawerLayout;
-import androidx.recyclerview.widget.GridLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
-import android.graphics.Color;
 import android.net.Uri;
 import android.os.Bundle;
-import android.util.Log;
 import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.View;
@@ -23,9 +13,18 @@
 import android.widget.SearchView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.ActionBarDrawerToggle;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.view.GravityCompat;
+import androidx.drawerlayout.widget.DrawerLayout;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.example.pabs.Adapters.EventRecyclerViewAdapter;
 import com.example.pabs.Fragments.CalendarFragment;
 import com.example.pabs.Fragments.EventFragment.CreateEventFragment;
+import com.example.pabs.Fragments.MyToDoFragment;
 import com.example.pabs.Models.Event;
 import com.google.android.material.navigation.NavigationView;
 import com.google.firebase.database.DataSnapshot;
@@ -35,7 +34,6 @@
 import com.google.firebase.database.ValueEventListener;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 
@@ -47,6 +45,7 @@
 
     //UI
     private ImageView create_event_img_btn;
+    private ImageView open_group_btn;
 
     //firebase
     private DatabaseReference reference;
@@ -54,7 +53,6 @@
 
     //events
     private List<Event> lstEvent;
-    private List<Event> lstEventCopy;
 
     //drawer
     private DrawerLayout drawer = null;
@@ -62,7 +60,18 @@
 
     //
     private SearchView sw;
-    private EventRecyclerViewAdapter myAdapter;
+    private EventRecyclerViewAdapter myEventAdapter;
+
+    public static void hideKeyboard(Activity activity) {
+        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
+        //Find the currently focused view, so we can grab the correct window token from it.
+        View view = activity.getCurrentFocus();
+        //If no view currently has focus, create a new one, just so we can grab a window token from it
+        if (view == null) {
+            view = new View(activity);
+        }
+        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
+    }
 
     /**
      * On create
@@ -203,41 +212,50 @@
             }
         });
         //
+
+        //open group button
+        open_group_btn = findViewById(R.id.a_e_open_group_button);
+        open_group_btn.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                    clearBackstack();
+                    openGroupActivity();
+                }
+                return false;
+            }
+        });
 
-
-        //
+        //search view
         sw = findViewById(R.id.e_search_bar);
         sw.setQueryHint("Search event name...");
 
+        sw.setOnCloseListener(new SearchView.OnCloseListener() {
+            @Override
+            public boolean onClose() {
+                hideKeyboard(EventActivity.this);
+                return false;
+            }
+        });
+
         sw.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String query) {
-                myAdapter.filter(query);
+                myEventAdapter.filter(query);
                 hideKeyboard(EventActivity.this);
                 return true;
             }
 
             @Override
             public boolean onQueryTextChange(String newText) {
-                myAdapter.filter(newText);
+                myEventAdapter.filter(newText);
                 return true;
             }
         });
 
     }
 
-    public static void hideKeyboard(Activity activity) {
-        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
-        //Find the currently focused view, so we can grab the correct window token from it.
-        View view = activity.getCurrentFocus();
-        //If no view currently has focus, create a new one, just so we can grab a window token from it
-        if (view == null) {
-            view = new View(activity);
-        }
-        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
-    }
-
-    private void openLoginActivity(){
+    private void openLoginActivity() {
         Intent intent = new Intent(this, LoginActivity.class);
         startActivity(intent);
     }
@@ -245,29 +263,29 @@
     /**
      * Add to events inside DataChanged method so we don't lose the results
      */
-    public void addToEventsArray(Event tempEv){
+    public void addToEventsArray(Event tempEv) {
         lstEvent.add(tempEv);
     }
 
     /**
      * Clear events inside DataChanged method
      */
-    public void clearEvents(){
+    public void clearEvents() {
         lstEvent.clear();
     }
 
     /**
      * Set events inside DataChanged method
      */
-    public void setEvents(){
+    public void setEvents() {
         //create and set RecyclerView
         RecyclerView myRv = (RecyclerView) findViewById(R.id.e_recycler_view);
         //create Adapter with lstEvent in this context
-        myAdapter = new EventRecyclerViewAdapter(this, lstEvent, getSupportFragmentManager(), uID);
+        myEventAdapter = new EventRecyclerViewAdapter(this, lstEvent, getSupportFragmentManager(), uID);
         //separate the Recyclerview to 3 columns
         myRv.setLayoutManager(new GridLayoutManager(this, 3));
         //set adapter for RecyclerView
-        myRv.setAdapter(myAdapter);
+        myRv.setAdapter(myEventAdapter);
     }
 
     /**
@@ -276,20 +294,21 @@
     @SuppressLint("NonConstantResourceId")
     @Override
     public boolean onNavigationItemSelected(@NonNull MenuItem item) {
-        switch (item.getItemId()){
+        switch (item.getItemId()) {
             case R.id.nav_events:
-                for(int i = 0; i < getSupportFragmentManager().getBackStackEntryCount(); ++i) {
-                    getSupportFragmentManager().popBackStack();
-                }
+                clearBackstack();
                 Toast.makeText(this, "nav_events", Toast.LENGTH_SHORT).show();
                 break;
 
             case R.id.nav_calendar:
+                clearBackstack();
                 openCalendarFragment();
                 Toast.makeText(this, "nav_calendar", Toast.LENGTH_SHORT).show();
                 break;
 
             case R.id.nav_groups:
+                clearBackstack();
+                openGroupActivity();
                 Toast.makeText(this, "nav_groups", Toast.LENGTH_SHORT).show();
                 break;
 
@@ -297,6 +316,11 @@
                 Toast.makeText(this, "nav_profile", Toast.LENGTH_SHORT).show();
                 break;
 
+            case R.id.nav_todo:
+                openMyToDoFragment();
+                Toast.makeText(this, "nav_todo", Toast.LENGTH_SHORT).show();
+                break;
+
             case R.id.nav_settings:
                 Toast.makeText(this, "nav_settings", Toast.LENGTH_SHORT).show();
                 break;
@@ -317,22 +341,48 @@
         return true;
     }
 
+    private void clearBackstack() {
+        for (int i = 0; i < getSupportFragmentManager().getBackStackEntryCount(); ++i) {
+            getSupportFragmentManager().popBackStack();
+        }
+    }
+
+    /**
+     * open group activity
+     */
+    private void openGroupActivity() {
+        Intent intent = new Intent(this, GroupActivity.class);
+        intent.putExtra("USER", uID);
+        finish();
+        startActivity(intent);
+    }
 
     /**
      * open create event fragment
      */
-    private void openCreateEventFragment(){
+    private void openCreateEventFragment() {
         getSupportFragmentManager()
                 .beginTransaction()
                 .replace(R.id.fragment_event_container, new CreateEventFragment(uID))
                 .addToBackStack("CreateEventFragment")
                 .commit();
     }
+
+    /**
+     * open MyToDo event fragment
+     */
+    private void openMyToDoFragment(){
+        getSupportFragmentManager()
+                .beginTransaction()
+                .replace(R.id.fragment_event_container, new MyToDoFragment())
+                .addToBackStack("MyToDoFragment")
+                .commit();
+    }
 
     /**
      * open calendar event fragment
      */
-    private void openCalendarFragment(){
+    private void openCalendarFragment() {
         getSupportFragmentManager()
                 .beginTransaction()
                 .replace(R.id.fragment_event_container, new CalendarFragment())
