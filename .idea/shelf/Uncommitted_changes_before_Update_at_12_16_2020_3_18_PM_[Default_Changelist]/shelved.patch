Index: app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Adapters;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.Fragments.CreateEventFragment;\r\nimport com.example.pabs.Fragments.EventFragment;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.Models.Event;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Creates an array of card elements\r\n */\r\n\r\npublic class EventRecyclerViewAdapter extends RecyclerView.Adapter<EventRecyclerViewAdapter.MyViewHolder>{\r\n\r\n    private Context mContext;\r\n    private List<Event> mData;\r\n    private FragmentManager mFragment;\r\n\r\n    /**\r\n     * Constructor of EventRecyclerViewAdapter\r\n     */\r\n    public EventRecyclerViewAdapter(Context mContext, List<Event> mData, FragmentManager fragment) {\r\n        this.mContext = mContext;\r\n        this.mData = mData;\r\n        this.mFragment = fragment;\r\n    }\r\n\r\n    /**\r\n     * OnCreateViewHolder - layout initializer\r\n     */\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        //Init view and set view of viewHolder\r\n        View view;\r\n        LayoutInflater mInflater = LayoutInflater.from(mContext);\r\n        view = mInflater.inflate(R.layout.cardview_event, parent, false);\r\n        return new MyViewHolder(view);\r\n    }\r\n\r\n    /**\r\n     * Set data for every individual card\r\n     */\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final MyViewHolder holder, final int position) {\r\n\r\n        //set data\r\n        holder.tv_title.setText(mData.get(position).getTitle());\r\n\r\n        Picasso.get().load(mData.get(position).getThumbnail()).resize(400,400).centerCrop().into(holder.img_thumbnail);\r\n\r\n        //set click listener\r\n        holder.cardView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Toast.makeText(mContext, mData.get(position).getTitle(), Toast.LENGTH_SHORT).show();\r\n\r\n                //Getting events from database and setting them to recyclerview\r\n                DatabaseReference databaseEvents;\r\n                databaseEvents = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n                databaseEvents.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot event : snapshot.getChildren()) {\r\n                            //Loop to go through all child nodes of event\r\n\r\n                            //temp for storing data from database\r\n                            DatabaseEvent temp = new DatabaseEvent();\r\n                            //setting data to temp from database\r\n                            temp.setOwner_id(event.getKey());\r\n                            temp.setEvent_name(event.child(\"event_name\").getValue().toString());\r\n                            temp.setLocation_name(event.child(\"location_name\").getValue().toString());\r\n                            String tempx = event.child(\"location_x\").getValue().toString();\r\n                            temp.setLocation_x(Double.parseDouble(tempx));\r\n                            String tempy = event.child(\"location_y\").getValue().toString();\r\n                            temp.setLocation_y(Double.parseDouble(tempy));\r\n                            temp.setStart_date(event.child(\"start_date\").getValue().toString());\r\n                            temp.setEnd_date(event.child(\"end_date\").getValue().toString());\r\n                            temp.setPriv_pub(event.child(\"priv_pub\").getValue().toString());\r\n\r\n                            final List<String> staff_members =  new ArrayList<>();\r\n                            event.getRef().child(\"staff_members\").addValueEventListener(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n\r\n                                    for (DataSnapshot staff : snapshot.getChildren()) {\r\n                                        //Loop 1 to go through all child nodes of staff members\r\n                                        staff_members.add(staff.getValue().toString());\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n\r\n                            //add staff members to event\r\n                            temp.setStaff_members(staff_members);\r\n\r\n                            //if event has a thumbnail add it to temp\r\n                            if(event.child(\"thumbnail\").getValue() != null){\r\n                                temp.setThumbnail(event.child(\"thumbnail\").getValue().toString());\r\n                            }\r\n\r\n                            //open Event which matches with the title from the Database Event\r\n                            if(mData.get(position).getTitle() == temp.getEvent_name()){\r\n                                openEvent(temp);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n                    //if database failed\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Open Event Fragment with data\r\n     */\r\n    public void openEvent(DatabaseEvent databaseEvent){\r\n        mFragment\r\n                .beginTransaction()\r\n                .replace( R.id.fragment_event_container , new EventFragment(databaseEvent))\r\n                .addToBackStack(\"EventFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * Returns size of cards\r\n     */\r\n    @Override\r\n    public int getItemCount() {\r\n        return mData.size();\r\n    }\r\n\r\n    /**\r\n     * Creates card item\r\n     */\r\n    public static class MyViewHolder extends RecyclerView.ViewHolder{\r\n\r\n        //UI\r\n        TextView tv_title;\r\n        ImageView img_thumbnail;\r\n        CardView cardView;\r\n\r\n        /**\r\n         * Creates view for the item\r\n         */\r\n        public MyViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            //get UI as objects\r\n            tv_title = (TextView) itemView.findViewById(R.id.c_e_event_title);\r\n            img_thumbnail= (ImageView) itemView.findViewById(R.id.c_e_thumbnail);\r\n            cardView = (CardView) itemView.findViewById(R.id.card_event);\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java	(date 1608124599097)
@@ -123,6 +123,11 @@
                                 }
                             });
 
+                            Log.d("GECI", "HEY PUCA");
+                            for(int i = 0 ; i < staff_members.size(); ++i){
+                                Log.d("GECI", "STAFF GECIK:" + staff_members.get(i));
+                            }
+
                             //add staff members to event
                             temp.setStaff_members(staff_members);
 
Index: app/src/main/java/com/example/pabs/Fragments/CalendarFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Color;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Adapters.EventRecyclerViewAdapter;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.Models.Event;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.text.DateFormatSymbols;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.StringTokenizer;\r\n\r\nimport sun.bob.mcalendarview.MarkStyle;\r\nimport sun.bob.mcalendarview.listeners.OnMonthChangeListener;\r\nimport sun.bob.mcalendarview.vo.DateData;\r\n\r\npublic class CalendarFragment extends Fragment {\r\n\r\n    //calendar\r\n    sun.bob.mcalendarview.views.ExpCalendarView customCalendar;\r\n\r\n    //TextViews\r\n    TextView curr_month, currDate;\r\n\r\n    Context mContext;\r\n    //List<DatabaseEvent> lstDatabaseEvent;\r\n\r\n    private View listView;\r\n\r\n    //firebase\r\n    private String uID;\r\n\r\n    //events\r\n    List<Event> lstEvent;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View calendarView = inflater.inflate(R.layout.fragment_calendar, container, false);\r\n\r\n        listView = getActivity().findViewById(R.id.activity_event_layout);\r\n\r\n        //setting the current date in CalendarView\r\n        setCurrDateInCalendarFragment(calendarView);\r\n\r\n        //getting the custom calendar view object\r\n        customCalendar = calendarView.findViewById(R.id.calendar_calendar);\r\n\r\n        //setting the current month and year in CalendarView\r\n        curr_month = calendarView.findViewById(R.id.calendar_curr_month);\r\n        int cmonth = Calendar.getInstance().get(Calendar.MONTH)+1;\r\n        int cyear = Calendar.getInstance().get(Calendar.YEAR);\r\n        setCurrMonthandYear(curr_month, cmonth, cyear);\r\n\r\n        customCalendar.setOnMonthChangeListener(new OnMonthChangeListener() {\r\n            @Override\r\n            public void onMonthChange(int year, int month) {\r\n                setCurrMonthandYear(curr_month, month, year);\r\n            }\r\n        });\r\n\r\n        //set data for events example\r\n        lstEvent = new ArrayList<>();\r\n\r\n        //Getting events from database and setting them to recyclerview\r\n        DatabaseReference databaseEvents;\r\n        databaseEvents = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n        databaseEvents.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                clearEvents();\r\n                for (DataSnapshot event : snapshot.getChildren()) {\r\n                    //Loop 1 to go through all child nodes of events\r\n                    String e_name = event.child(\"event_name\").getValue().toString();\r\n                    String event_startdate = event.child(\"start_date\").getValue().toString();\r\n\r\n                    //creating a temporary event object\r\n                    Uri myUri = Uri.parse(\"https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351\");\r\n                    Event tempEv = new Event(e_name, myUri, event_startdate);\r\n\r\n                    //pushing the temporary event object into an arraylist\r\n                    addToEventsArray(tempEv);\r\n                }\r\n                //marking the Dates on which we have Events\r\n                markEvents();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        return calendarView;\r\n    }\r\n\r\n    private void markEvents() {\r\n        for(Event i : lstEvent){\r\n            DateData temp = convertDate(i.getStartDate());\r\n            customCalendar.markDate(temp.setMarkStyle(MarkStyle.LEFTSIDEBAR,Color.BLUE));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        listView.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        listView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void setCurrDateInCalendarFragment(View calendarView){\r\n        Date d = Calendar.getInstance().getTime();\r\n        SimpleDateFormat df = new SimpleDateFormat(\"dd/MM/yyyy\", Locale.getDefault());\r\n        String curr_date = df.format(d);\r\n        currDate = calendarView.findViewById(R.id.calendar_curr_date);\r\n        currDate.setText(curr_date);\r\n    }\r\n\r\n    private void setCurrMonthandYear(TextView curr_month, int month, int year){\r\n        curr_month.setText(getMonth(month) + \" \" + year);\r\n    }\r\n\r\n    private DateData convertDate(String date){\r\n        StringTokenizer token = new StringTokenizer(date,\"/\");\r\n        int nap=0,honap=0,ev=0;\r\n        int cnt = 0;\r\n        while(token.hasMoreTokens()){\r\n            if(cnt == 0) {\r\n                nap = Integer.parseInt(token.nextToken());\r\n                cnt++;\r\n            }\r\n            else if(cnt == 1){\r\n                honap = Integer.parseInt(token.nextToken());\r\n                cnt++;\r\n            }\r\n            else if(cnt == 2){\r\n                ev = Integer.parseInt(token.nextToken());\r\n                cnt++;\r\n            }\r\n        }\r\n        DateData dateData = new DateData(ev,honap,nap);\r\n        return dateData;\r\n    }\r\n\r\n    public String getMonth(int month) {\r\n        return new DateFormatSymbols().getMonths()[month-1];\r\n    }\r\n\r\n    public void addToEventsArray(Event tempEv){\r\n        lstEvent.add(tempEv);\r\n    }\r\n\r\n    public void clearEvents(){\r\n        lstEvent.clear();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/CalendarFragment.java	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ app/src/main/java/com/example/pabs/Fragments/CalendarFragment.java	(date 1608124477782)
@@ -73,6 +73,9 @@
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
+        //get uid of logged in user
+        uID = getActivity().getIntent().getStringExtra("USER");
+
         // Inflate the layout for this fragment
         View calendarView = inflater.inflate(R.layout.fragment_calendar, container, false);
 
@@ -104,24 +107,58 @@
         DatabaseReference databaseEvents;
         databaseEvents = FirebaseDatabase.getInstance().getReference().child("EVENT");
 
+        //databaseEvents.addValueEventListener(new ValueEventListener() {
         databaseEvents.addValueEventListener(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
                 clearEvents();
                 for (DataSnapshot event : snapshot.getChildren()) {
+                    Event tempEv = new Event();
+
                     //Loop 1 to go through all child nodes of events
                     String e_name = event.child("event_name").getValue().toString();
+                    tempEv.setTitle(e_name);
                     String event_startdate = event.child("start_date").getValue().toString();
+                    tempEv.setStartDate(event_startdate);
+
+                    final List<String> joined_users =  new ArrayList<>();
+                    event.getRef().child("joined_members").addValueEventListener(new ValueEventListener() {
+                        @Override
+                        public void onDataChange(@NonNull DataSnapshot snapshot) {
+
+                            for (DataSnapshot users : snapshot.getChildren()) {
+                                //Loop 1 to go through all child nodes of joined members
+                                //Log.d("usersid", "onDataChange: " + users.getValue().toString());
+                                joined_users.add(users.getValue().toString());
+                                //Log.d("tempEV", "onDataChange: "+ tempEv.getJoinedMemberlst().get(0));
+                            }
+
+                        }
+
+                        @Override
+                        public void onCancelled(@NonNull DatabaseError error) {
 
-                    //creating a temporary event object
-                    Uri myUri = Uri.parse("https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351");
-                    Event tempEv = new Event(e_name, myUri, event_startdate);
+                        }
+                    });
+
+                    tempEv.setJoined_members(joined_users);
+
 
                     //pushing the temporary event object into an arraylist
+                    if(tempEv != null){
+                        Log.d("Eztakaromlatni", "onDataChange: tempEV not null!");
+                        Log.d("Eztakaromlatni",tempEv.getTitle());
+                        if(tempEv.getJoined_members() != null){
+                            Log.d("Eztakaromlatni", "NEM NULL A KURVA MEMBERS!");
+                            for(int i = 0; i < tempEv.getJoined_members().size(); ++i){
+                                Log.d("Eztakaromlatni", "TAGOK: " +  tempEv.getJoined_members().get(i));
+                            }
+                        }
+                    }
                     addToEventsArray(tempEv);
                 }
                 //marking the Dates on which we have Events
-                markEvents();
+                //markEvents();
             }
 
             @Override
@@ -129,16 +166,28 @@
 
             }
         });
-
         return calendarView;
     }
 
-    private void markEvents() {
+    /*private void markEvents() {
         for(Event i : lstEvent){
-            DateData temp = convertDate(i.getStartDate());
-            customCalendar.markDate(temp.setMarkStyle(MarkStyle.LEFTSIDEBAR,Color.BLUE));
+            if(findTokens(i.joined_members,uID)) {
+                DateData temp = convertDate(i.getStartDate());
+                customCalendar.markDate(temp.setMarkStyle(MarkStyle.LEFTSIDEBAR, Color.BLUE));
+            }
         }
-    }
+    }*/
+
+    /*private boolean findTokens(List<String>j_users, String user){
+        boolean present = false;
+        for(String i: j_users){
+            if(i == user){
+                present = true;
+                break;
+            }
+        }
+        return present;
+    }*/
 
     @Override
     public void onStart() {
@@ -187,14 +236,24 @@
         return dateData;
     }
 
+    /*public void setEvent(List<String> users){
+        tempEv.setJoinedMemberlst(users);
+        /*for(int i=0; i<users.size(); ++i){
+            Log.d("tempEV", users.get(i));
+        }
+    }*/
+
     public String getMonth(int month) {
         return new DateFormatSymbols().getMonths()[month-1];
     }
 
     public void addToEventsArray(Event tempEv){
+        Log.d("Eztakaromlatni", "addToEventsArray: " + tempEv.getTitle());
         lstEvent.add(tempEv);
     }
 
+    /*public void addToJoined_usersArray(String tempEv){ joined_users.add(tempEv); }*/
+
     public void clearEvents(){
         lstEvent.clear();
     }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM_[Default_Changelist]/shelved.patch	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM_[Default_Changelist]/shelved.patch	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
@@ -1,450 +0,0 @@
-Index: app/src/main/java/com/example/pabs/Fragments/EventFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.pabs.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.content.ContentResolver;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.Image;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport android.provider.MediaStore;\r\nimport android.text.GetChars;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.webkit.MimeTypeMap;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.Models.Event;\r\nimport com.example.pabs.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.MapView;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.Continuation;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.StorageTask;\r\nimport com.google.firebase.storage.UploadTask;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URI;\r\nimport java.net.URL;\r\n\r\n/**\r\n * Handle an event\r\n */\r\n\r\npublic class EventFragment extends Fragment implements OnMapReadyCallback {\r\n\r\n    public static final int GET_FROM_GALLERY = 3;\r\n    private static final String TAG = \"EventFragment\";\r\n    //UI\r\n    private Button back_button;\r\n    private Button delete_button;\r\n    private View containerView;\r\n\r\n    private MapView mapView;\r\n\r\n    private TextView event_name_tv;\r\n    private TextView event_date_start_tv;\r\n    private TextView event_date_end_tv;\r\n    private TextView event_description_tv;\r\n    private TextView location_text_tv;\r\n\r\n    //map\r\n    private GoogleMap mMap;\r\n\r\n    //database event\r\n    private DatabaseEvent databaseEvent;\r\n\r\n    //camera\r\n    private ImageView image_view;\r\n    private StorageReference mStorageRef;\r\n    private Button ch, up;\r\n    public Uri imgUri;\r\n    private StorageTask uploadTask;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public EventFragment(DatabaseEvent dbE) {\r\n        databaseEvent = dbE;\r\n    }\r\n\r\n    /**\r\n     * On Create\r\n     */\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    /**\r\n     * On Create View\r\n     */\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_event, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n\r\n        //init UI\r\n        event_name_tv = view.findViewById(R.id.fe_event_name);\r\n        event_date_start_tv = view.findViewById(R.id.fe_event_date_start);\r\n        event_date_end_tv = view.findViewById(R.id.fe_event_date_end);\r\n        event_description_tv = view.findViewById(R.id.fe_event_description);\r\n        location_text_tv = view.findViewById(R.id.fe_location_text);\r\n\r\n        image_view = view.findViewById(R.id.fe_event_image);\r\n\r\n        ch =  view.findViewById(R.id.fe_change_button);\r\n        up =  view.findViewById(R.id.fe_upload_button);\r\n\r\n        if(databaseEvent.getThumbnail() != null){\r\n            //set image if it's not null\r\n\r\n            Uri myUri = Uri.parse(databaseEvent.getThumbnail());\r\n\r\n            //Picasso license\r\n            Picasso.get().load(myUri).into(image_view);\r\n        }\r\n\r\n        //setting text in UI with databaseEvent data\r\n        event_name_tv.setText(databaseEvent.getEvent_name());\r\n        event_date_start_tv.setText(databaseEvent.getStart_date());\r\n        event_date_end_tv.setText(databaseEvent.getEnd_date());\r\n        event_description_tv.setText(databaseEvent.getDescription());\r\n        location_text_tv.setText(databaseEvent.getLocation_name());\r\n\r\n        //back button\r\n        back_button = view.findViewById(R.id.fe_back_button);\r\n\r\n        back_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //getActivity().getSupportFragmentManager().popBackStack(\"EventFragment\", 1);\r\n                //clear all backstack\r\n                clearBackstack();\r\n            }\r\n        });\r\n\r\n        //delete button to delete event\r\n        delete_button = view.findViewById(R.id.fe_plus_button);\r\n\r\n        delete_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                DatabaseReference ref = FirebaseDatabase.getInstance().getReference();\r\n                Query applesQuery = ref.child(\"EVENT\").orderByChild(\"event_name\").equalTo(databaseEvent.getEvent_name());\r\n\r\n                applesQuery.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(DataSnapshot dataSnapshot) {\r\n                        for (DataSnapshot appleSnapshot: dataSnapshot.getChildren()) {\r\n                            appleSnapshot.getRef().removeValue();\r\n                            clearBackstack();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(DatabaseError databaseError) {\r\n                        Log.e(\"EventFragment\", \"onCancelled\", databaseError.toException());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        //image button\r\n        ch.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                viewGallery();\r\n            }\r\n        });\r\n\r\n        up.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(imgUri != null){\r\n                    if (uploadTask != null && uploadTask.isInProgress()){\r\n                        Toast.makeText(getActivity(), \"Upload in progress\", Toast.LENGTH_SHORT).show();\r\n                    }else {\r\n                        fileUploader();\r\n                    }\r\n                }\r\n                else{\r\n                    Toast.makeText(getActivity(), \"Image not selected!\", Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        mStorageRef = FirebaseStorage.getInstance().getReference(\"Images\");\r\n\r\n        // Gets the MapView from the XML layout and creates it\r\n        mapView = (MapView) view.findViewById(R.id.fe_map);\r\n        mapView.onCreate(savedInstanceState);\r\n\r\n        //Sync Map View\r\n        mapView.getMapAsync(this);\r\n\r\n        return view;\r\n    }\r\n\r\n    /**\r\n     * fileUploader\r\n     */\r\n\r\n    private String getExtension(Uri uri){\r\n        ContentResolver cr = getActivity().getContentResolver();\r\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\r\n        return mimeTypeMap.getExtensionFromMimeType(cr.getType(uri));\r\n    }\r\n\r\n    private void fileUploader(){\r\n        final StorageReference ref = mStorageRef.child(System.currentTimeMillis() +\".\"+getExtension(imgUri));\r\n\r\n        final UploadTask uploadTask = ref.putFile(imgUri);\r\n        uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n\r\n                uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {\r\n                    @Override\r\n                    public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {\r\n                        if (!task.isSuccessful()) {\r\n                            throw task.getException();\r\n                        }\r\n                        // Continue with the task to get the download URL\r\n                        return ref.getDownloadUrl();\r\n\r\n                    }\r\n                }).addOnCompleteListener(new OnCompleteListener<Uri>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<Uri> task) {\r\n                        if (task.isSuccessful()) {\r\n                            Toast.makeText(getActivity(), \"Image uploaded succesfully\", Toast.LENGTH_SHORT).show();\r\n                            final Uri downloadUri = task.getResult();\r\n                            Log.d(TAG, \"URL for image:\"+downloadUri);\r\n\r\n                            final DatabaseReference ref = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n                            ref.addValueEventListener(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    for (DataSnapshot event : snapshot.getChildren()) {\r\n                                        //Loop 1 to go through all child nodes of users\r\n                                        if(event.child(\"event_name\").getValue() == databaseEvent.getEvent_name()){\r\n                                            setThumbnail(event.getKey(), ref, downloadUri);\r\n                                            databaseEvent.setThumbnail(downloadUri.toString());\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setThumbnail(String key, DatabaseReference ref, Uri downloadUri){\r\n        ref.child(key).child(\"thumbnail\").setValue(downloadUri.toString());\r\n    }\r\n\r\n    /**\r\n     * Open Gallery\r\n     */\r\n\r\n    private void viewGallery(){\r\n        startActivityForResult(new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI), GET_FROM_GALLERY);\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        //Detects request codes\r\n        if(requestCode==GET_FROM_GALLERY && resultCode == Activity.RESULT_OK) {\r\n            Uri selectedImage = data.getData();\r\n            Bitmap bitmap = null;\r\n            try {\r\n                imgUri = data.getData();\r\n                image_view.setImageURI(imgUri);\r\n\r\n                bitmap = MediaStore.Images.Media.getBitmap(getActivity().getContentResolver(), selectedImage);\r\n                Log.d(TAG, \"Image Selected Successfully!\");\r\n            } catch (FileNotFoundException e) {\r\n                // TODO Auto-generated catch block\r\n                e.printStackTrace();\r\n            } catch (IOException e) {\r\n                // TODO Auto-generated catch block\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * clearBackstack\r\n     */\r\n    public void clearBackstack(){\r\n        //clear all backstact\r\n        if (getActivity().getSupportFragmentManager().getBackStackEntryCount() == 1) {\r\n            getActivity().getSupportFragmentManager().popBackStack(\"EventFragment\", 1);\r\n        } else {\r\n            for(int i = 0; i < getActivity().getSupportFragmentManager().getBackStackEntryCount(); ++i) {\r\n                getActivity().getSupportFragmentManager().popBackStack();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * onMapReady\r\n     */\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n\r\n        //get lat lng from databaseEvent\r\n        LatLng eventLocation = new LatLng(databaseEvent.getLocation_x(), databaseEvent.getLocation_y());\r\n\r\n        //init mMap\r\n        mMap = googleMap;\r\n\r\n        //add marker to map to location from databaseEvent\r\n        mMap.addMarker(new MarkerOptions()\r\n                .position(eventLocation)\r\n                .title(databaseEvent.getLocation_name()));\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(eventLocation, 10));\r\n\r\n        //set on Map Click Listener\r\n        mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\r\n            @Override\r\n            public void onMapClick(LatLng latLng) {\r\n                Toast.makeText(getActivity(), \"Clicked on map\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * onStart\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(View.GONE);\r\n    }\r\n\r\n    /**\r\n     * onStop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    /**\r\n     * onResume\r\n     */\r\n    @Override\r\n    public void onResume() {\r\n        mapView.onResume();\r\n        super.onResume();\r\n    }\r\n\r\n    /**\r\n     * on fragment stop\r\n     */\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        mapView.onPause();\r\n    }\r\n\r\n    /**\r\n     * onDestroy\r\n     */\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        mapView.onDestroy();\r\n    }\r\n\r\n    /**\r\n     * onLowMemory\r\n     */\r\n    @Override\r\n    public void onLowMemory() {\r\n        super.onLowMemory();\r\n        mapView.onLowMemory();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/pabs/Fragments/EventFragment.java	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ app/src/main/java/com/example/pabs/Fragments/EventFragment.java	(date 1607322846283)
-@@ -87,7 +87,7 @@
-     //database event
-     private DatabaseEvent databaseEvent;
- 
--    //camera
-+    //image handling
-     private ImageView image_view;
-     private StorageReference mStorageRef;
-     private Button ch, up;
-@@ -133,7 +133,6 @@
- 
-         if(databaseEvent.getThumbnail() != null){
-             //set image if it's not null
--
-             Uri myUri = Uri.parse(databaseEvent.getThumbnail());
- 
-             //Picasso license
-@@ -153,7 +152,6 @@
-         back_button.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View view) {
--                //getActivity().getSupportFragmentManager().popBackStack("EventFragment", 1);
-                 //clear all backstack
-                 clearBackstack();
-             }
-@@ -172,20 +170,24 @@
-                     @Override
-                     public void onDataChange(DataSnapshot dataSnapshot) {
-                         for (DataSnapshot appleSnapshot: dataSnapshot.getChildren()) {
-+                            //delete selected event
-                             appleSnapshot.getRef().removeValue();
-+
-+                            //clear it from backstack
-                             clearBackstack();
-                         }
-                     }
- 
-                     @Override
-                     public void onCancelled(DatabaseError databaseError) {
-+                        //database failed
-                         Log.e("EventFragment", "onCancelled", databaseError.toException());
-                     }
-                 });
-             }
-         });
- 
--        //image button
-+        //change image of event
-         ch.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View view) {
-@@ -193,23 +195,29 @@
-             }
-         });
- 
-+        //upload image to database
-         up.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View view) {
-                 if(imgUri != null){
-+                    //if we have an image selected
-                     if (uploadTask != null && uploadTask.isInProgress()){
-+                        //if upload is not finished
-                         Toast.makeText(getActivity(), "Upload in progress", Toast.LENGTH_SHORT).show();
-                     }else {
-+                        //if upload is not started
-                         fileUploader();
-                     }
-                 }
-                 else{
-+                    //if image is not selected
-                     Toast.makeText(getActivity(), "Image not selected!", Toast.LENGTH_SHORT).show();
-                 }
- 
-             }
-         });
- 
-+        //get reference to firebase storage "Images/" path
-         mStorageRef = FirebaseStorage.getInstance().getReference("Images");
- 
-         // Gets the MapView from the XML layout and creates it
-@@ -225,7 +233,6 @@
-     /**
-      * fileUploader
-      */
--
-     private String getExtension(Uri uri){
-         ContentResolver cr = getActivity().getContentResolver();
-         MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();
-@@ -233,13 +240,16 @@
-     }
- 
-     private void fileUploader(){
-+        //get reference to name
-         final StorageReference ref = mStorageRef.child(System.currentTimeMillis() +"."+getExtension(imgUri));
- 
-+        //set upload task to imgUri
-         final UploadTask uploadTask = ref.putFile(imgUri);
-+
-         uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
-             @Override
-             public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
--
-+                //start upload
-                 uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {
-                     @Override
-                     public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {
-@@ -254,18 +264,20 @@
-                     @Override
-                     public void onComplete(@NonNull Task<Uri> task) {
-                         if (task.isSuccessful()) {
-+                            //if image is uploaded
-                             Toast.makeText(getActivity(), "Image uploaded succesfully", Toast.LENGTH_SHORT).show();
-+
-                             final Uri downloadUri = task.getResult();
--                            Log.d(TAG, "URL for image:"+downloadUri);
--
-                             final DatabaseReference ref = FirebaseDatabase.getInstance().getReference().child("EVENT");
- 
-+                            //connect firebase storage with firebase realtime database
-                             ref.addValueEventListener(new ValueEventListener() {
-                                 @Override
-                                 public void onDataChange(@NonNull DataSnapshot snapshot) {
-                                     for (DataSnapshot event : snapshot.getChildren()) {
-                                         //Loop 1 to go through all child nodes of users
-                                         if(event.child("event_name").getValue() == databaseEvent.getEvent_name()){
-+                                            //set thumbnail
-                                             setThumbnail(event.getKey(), ref, downloadUri);
-                                             databaseEvent.setThumbnail(downloadUri.toString());
-                                         }
-@@ -274,7 +286,7 @@
- 
-                                 @Override
-                                 public void onCancelled(@NonNull DatabaseError error) {
--
-+                                    //database failed
-                                 }
-                             });
- 
-@@ -287,10 +299,14 @@
-         }).addOnFailureListener(new OnFailureListener() {
-             @Override
-             public void onFailure(@NonNull Exception e) {
-+                //upload task failed
-             }
-         });
-     }
- 
-+    /**
-+     * set Thumbnail
-+     */
-     private void setThumbnail(String key, DatabaseReference ref, Uri downloadUri){
-         ref.child(key).child("thumbnail").setValue(downloadUri.toString());
-     }
-@@ -298,7 +314,6 @@
-     /**
-      * Open Gallery
-      */
--
-     private void viewGallery(){
-         startActivityForResult(new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI), GET_FROM_GALLERY);
-     }
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-@@ -1,108 +0,0 @@
--Index: app/src/main/AndroidManifest.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.pabs\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    \r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme.NoActionBar\">\r\n\r\n        <activity android:name=\".RegisterActivity\" />\r\n        <activity  android:name=\".EventActivity\"/>\r\n\r\n        <activity android:name=\".LoginActivity\" >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <service\r\n            android:name=\".Fcm.MyFirebaseMessagingService\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n    </application>\r\n\r\n</manifest>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/AndroidManifest.xml	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/src/main/AndroidManifest.xml	(date 1605471146502)
--@@ -29,6 +29,9 @@
--                 <action android:name="com.google.firebase.MESSAGING_EVENT" />
--             </intent-filter>
--         </service>
--+        <meta-data
--+            android:name="preloaded_fonts"
--+            android:resource="@array/preloaded_fonts" />
-- 
--     </application>
-- 
--Index: app/src/main/java/com/example/pabs/EventActivity.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.pabs;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Adapters.EventRecyclerViewAdapter;\r\nimport com.example.pabs.Models.Event;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Main screen, handles more fragments, events, groups\r\n */\r\n\r\npublic class EventActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n\r\n    //firebase\r\n    private DatabaseReference reference;\r\n    private String uID;\r\n\r\n    //events\r\n    List<Event> lstEvent;\r\n\r\n    //drawer\r\n    private DrawerLayout drawer = null;\r\n    private NavigationView navigationView = null;\r\n\r\n    /**\r\n     * On create\r\n     */\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event);\r\n\r\n        //get uid of logged in user\r\n        uID = getIntent().getStringExtra(\"USER\");\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"USER\");\r\n\r\n        //set data for events example\r\n        lstEvent = new ArrayList<>();\r\n\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n\r\n        //create and set RecyclerView\r\n        RecyclerView myRv = (RecyclerView) findViewById(R.id.e_recycler_view);\r\n        //create Adapter with lstEvent in this context\r\n        EventRecyclerViewAdapter myAdapter = new EventRecyclerViewAdapter(this, lstEvent);\r\n        //separate the Recyclerview to 3 columns\r\n        myRv.setLayoutManager(new GridLayoutManager(this, 3));\r\n        //set adapter for RecyclerView\r\n        myRv.setAdapter(myAdapter);\r\n\r\n        //nav view and drawer\r\n        navigationView = findViewById(R.id.nav_view);\r\n        drawer = findViewById(R.id.drawer_layout);\r\n\r\n        //handle navigation drawer open/close with toggle\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, null, R.string.navigation_drawer_open, R.string.navigation_drawer_close){\r\n            /** Called when a drawer has settled in a completely closed state. */\r\n            public void onDrawerClosed(View view) {\r\n                super.onDrawerClosed(view);\r\n                for(int i = 0; i < navigationView.getMenu().size(); ++i)\r\n                    navigationView.getMenu().getItem(i).setChecked(false);\r\n            }\r\n\r\n            /** Called when a drawer has settled in a completely open state. */\r\n            public void onDrawerOpened(View drawerView) {\r\n                super.onDrawerOpened(drawerView);\r\n            }\r\n        };\r\n\r\n        //add toggle to drawer\r\n        drawer.addDrawerListener(toggle);\r\n\r\n        //sync toggle\r\n        toggle.syncState();\r\n\r\n        // Write a string when this client loses connection\r\n        reference.child(uID).child(\"online\").onDisconnect().setValue(\"false\");\r\n    }\r\n\r\n    /**\r\n     * Called on selecting item from navigation list\r\n     */\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()){\r\n            case R.id.nav_events:\r\n                Toast.makeText(this, \"nav_events\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_calendar:\r\n                Toast.makeText(this, \"nav_calendar\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_groups:\r\n                Toast.makeText(this, \"nav_groups\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_profile:\r\n                Toast.makeText(this, \"nav_profile\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_settings:\r\n                Toast.makeText(this, \"nav_settings\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_logout:\r\n                Toast.makeText(this, \"nav_logout\", Toast.LENGTH_SHORT).show();\r\n                reference.child(uID).child(\"online\").setValue(\"false\");\r\n                finish();\r\n                break;\r\n\r\n            default:\r\n                Toast.makeText(this, \"error\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n\r\n        //close drawer on item clicked\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/com/example/pabs/EventActivity.java	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/src/main/java/com/example/pabs/EventActivity.java	(date 1605511774921)
--@@ -18,6 +18,9 @@
-- import android.widget.Toast;
-- 
-- import com.example.pabs.Adapters.EventRecyclerViewAdapter;
--+import com.example.pabs.Fragments.CalendarFragment;
--+import com.example.pabs.Fragments.PasswordRecoveryFragment;
--+import com.example.pabs.Fragments.SettingsFragment;
-- import com.example.pabs.Models.Event;
-- import com.google.android.material.navigation.NavigationView;
-- import com.google.firebase.database.DatabaseReference;
--@@ -129,7 +132,12 @@
--                 Toast.makeText(this, "nav_events", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--+            case R.id.nav_todo:
--+                Toast.makeText(this, "nav_todo", Toast.LENGTH_SHORT).show();
--+                break;
--+
--             case R.id.nav_calendar:
--+                openCalendarFragment();
--                 Toast.makeText(this, "nav_calendar", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--@@ -142,6 +150,7 @@
--                 break;
-- 
--             case R.id.nav_settings:
--+                openSettingsFragment();
--                 Toast.makeText(this, "nav_settings", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--@@ -160,4 +169,20 @@
--         drawer.closeDrawer(GravityCompat.START);
--         return true;
--     }
--+
--+    private void openCalendarFragment(){
--+        getSupportFragmentManager()
--+                .beginTransaction()
--+                .replace(R.id.drawer_layout, new CalendarFragment())
--+                .addToBackStack("CalendarFragment")
--+                .commit();
--+    }
--+
--+    private void openSettingsFragment(){
--+        getSupportFragmentManager()
--+                .beginTransaction()
--+                .replace(R.id.drawer_layout, new SettingsFragment())
--+                .addToBackStack("SettingsFragment")
--+                .commit();
--+    }
-- }
--\ No newline at end of file
--Index: app/build.gradle
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'  // Google Services plugin\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.1\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.pabs\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation \"androidx.cardview:cardview:1.0.0\"\r\n    implementation 'androidx.recyclerview:recyclerview:1.0.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.firebase:firebase-auth:19.3.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    // Import the BoM for the Firebase platform\r\n    implementation platform('com.google.firebase:firebase-bom:25.12.0')\r\n\r\n    // Declare the dependency for the Realtime Database library\r\n    // When using the BoM, you don't specify versions in Firebase library dependencies\r\n    implementation 'com.google.firebase:firebase-database'\r\n\r\n    // Add the dependency for the Firebase SDK for Google Analytics\r\n    // When using the BoM, don't specify versions in Firebase dependencies\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n\r\n    implementation 'com.google.firebase:firebase-auth'\r\n    implementation 'com.google.android.gms:play-services-gcm:17.0.0'\r\n\r\n    // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries\r\n    // When using the BoM, you don't specify versions in Firebase library dependencies\r\n    implementation 'com.google.firebase:firebase-messaging:20.1.0'\r\n\r\n    ///Navigation menu\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\r\n    implementation \"androidx.drawerlayout:drawerlayout:1.1.0\"\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/build.gradle	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/build.gradle	(date 1605464849113)
--@@ -36,7 +36,7 @@
--     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
-- 
--     // Import the BoM for the Firebase platform
---    implementation platform('com.google.firebase:firebase-bom:25.12.0')
--+    implementation platform('com.google.firebase:firebase-bom:26.0.0')
-- 
--     // Declare the dependency for the Realtime Database library
--     // When using the BoM, you don't specify versions in Firebase library dependencies
--@@ -48,6 +48,8 @@
-- 
--     implementation 'com.google.firebase:firebase-auth'
--     implementation 'com.google.android.gms:play-services-gcm:17.0.0'
--+    // Also declare the dependency for the Google Play services library and specify its version
--+    implementation 'com.google.android.gms:play-services-auth:18.1.0'
-- 
--     // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries
--     // When using the BoM, you don't specify versions in Firebase library dependencies
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]" date="1605693960872" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2020. 11. 18. 12:04 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: app/src/main/java/com/example/pabs/Fragments/CreateEventFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.pabs.Fragments;\r\n\r\nimport android.content.Context;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.HelperClass.DateInputMask;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\n/**\r\n * Creates a new event\r\n */\r\n\r\npublic class CreateEventFragment extends Fragment {\r\n\r\n    private static final String TAG = \"CreateEventFragment\";\r\n\r\n    //UI\r\n    private View containerView;\r\n    private Button back_button;\r\n    private Button next_button;\r\n    private EditText start_date_et;\r\n    private EditText end_date_et;\r\n    private EditText name_et;\r\n    private Spinner dropdown;\r\n    private EditText location_et;\r\n    private FrameLayout FragmentEventContainer;\r\n\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n\r\n    /**\r\n     * on fragment created\r\n     */\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    /**\r\n     * on view created\r\n     */\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View CreateEventView = inflater.inflate(R.layout.fragment_create_event, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n        //\r\n        FragmentEventContainer = getActivity().findViewById(R.id.fragment_container);\r\n\r\n        //back button\r\n        back_button = CreateEventView.findViewById(R.id.c_e_back_button);\r\n\r\n\r\n        back_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                getActivity().getSupportFragmentManager().popBackStack(\"CreateEventFragment\", 1);\r\n            }\r\n        });\r\n\r\n        //date edit text\r\n        //start date\r\n        start_date_et = CreateEventView.findViewById(R.id.c_e_event_start_date_edit);\r\n\r\n        new DateInputMask(start_date_et);\r\n\r\n        //end date\r\n        end_date_et = CreateEventView.findViewById(R.id.c_e_event_end_date_edit);\r\n\r\n        new DateInputMask(end_date_et);\r\n\r\n        //spinner\r\n        //get the spinner from the xml.\r\n        dropdown = CreateEventView.findViewById(R.id.c_e_public_private_spinner);\r\n        //create a list of items for the spinner.\r\n        String[] items = new String[]{\"Public\", \"Private\"};\r\n        //create an adapter to describe how the items are displayed, adapters are used in several places in android.\r\n        //There are multiple variations of this, but this is the basic variant.\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_dropdown_item, items);\r\n        //set the spinners adapter to the previously created one.\r\n        dropdown.setAdapter(adapter);\r\n\r\n        //location\r\n        location_et = CreateEventView.findViewById(R.id.c_e_event_location_edit);\r\n\r\n        //event name\r\n        name_et = CreateEventView.findViewById(R.id.c_e_event_name_edit);\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n        //next button\r\n        next_button = CreateEventView.findViewById(R.id.c_e_next_button);\r\n        next_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //if location field is empty\r\n                if (!TextUtils.isEmpty(location_et.getText().toString())) {\r\n                    //getting lat and lng from location\r\n                    LatLng latLng = getLocationFromAddress(getActivity(), location_et.getText().toString());\r\n\r\n                    if (latLng != null) {\r\n\r\n                        //arraylist of Strings which will contain staff members\r\n                        ArrayList<String> arrayList = new ArrayList<String>();\r\n\r\n                        arrayList.add(\"asd\");\r\n                        arrayList.add(\"pepe\");\r\n                        arrayList.add(\"asdasdad\");\r\n\r\n                        //getting user logged in\r\n                        FirebaseUser fireBaseUser = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n                        //check for empty fields\r\n                        if (!TextUtils.isEmpty(name_et.getText().toString()) && !TextUtils.isEmpty(start_date_et.getText().toString()) && !TextUtils.isEmpty(end_date_et.getText().toString())) {\r\n                            //new Database created from field contents written in by user\r\n                            DatabaseEvent databaseEvent = new DatabaseEvent();\r\n                            databaseEvent.setLocation_x(latLng.latitude);\r\n                            databaseEvent.setLocation_y(latLng.longitude);\r\n                            databaseEvent.setEvent_name(name_et.getText().toString());\r\n                            databaseEvent.setLocation_name(location_et.getText().toString());\r\n                            databaseEvent.setStart_date(start_date_et.getText().toString());\r\n                            databaseEvent.setEnd_date(end_date_et.getText().toString());\r\n                            databaseEvent.setPriv_pub(dropdown.getSelectedItem().toString());\r\n                            databaseEvent.setStaff_members(arrayList);\r\n                            databaseEvent.setOwner_id(fireBaseUser.getUid());\r\n                            databaseEvent.setThumbnail(\"https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351\");\r\n\r\n                            //pushing databaseEvent to database\r\n                            reference.push().setValue(databaseEvent);\r\n\r\n                            //open event\r\n                            openEvent(databaseEvent);\r\n                        }\r\n\r\n                        Log.d(TAG, \"onClick: \" + latLng);\r\n\r\n                        getAddress(latLng.latitude, latLng.longitude);\r\n\r\n\r\n                    } else {\r\n                        Toast.makeText(getActivity(), \"Wrong location!\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n                else{\r\n                    Toast.makeText(getActivity(), \"Empty Fields!\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n\r\n        //return view\r\n        return CreateEventView;\r\n    }\r\n\r\n\r\n    /**\r\n     * open EventFragment with Data of created event\r\n     */\r\n    public void openEvent(DatabaseEvent databaseEvent){\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace( R.id.fragment_event_container , new EventFragment(databaseEvent))\r\n                .addToBackStack(\"EventFragment\")\r\n                .commit();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Address from location\r\n     */\r\n    public void getAddress(double lat, double lng) {\r\n        try {\r\n            //init\r\n            Geocoder geo = new Geocoder(getActivity().getApplicationContext(), Locale.getDefault());\r\n            //get location address from lat lng\r\n            List<Address> addresses = geo.getFromLocation(lat, lng, 5);\r\n            if (addresses.isEmpty()) {\r\n                Log.d(TAG, \"Waiting for Location\");\r\n            }\r\n            else {\r\n                if (addresses.size() > 0) {\r\n                    //if location from lat lng was found write address\r\n                    Log.d(TAG, addresses.get(0).getAddressLine(0) + \", \" + addresses.get(0).getFeatureName() + \", \" + addresses.get(0).getLocality() +\", \" + addresses.get(0).getAdminArea() + \", \" + addresses.get(0).getCountryName());\r\n                }\r\n            }\r\n        }\r\n        catch(Exception e){\r\n            //if location lat lng was not found\r\n            Log.d(TAG, \"No Location Name Found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Thread for handling the location search, to avoid UI failure\r\n     */\r\n    public class MyThread implements Callable<LatLng> {\r\n\r\n        private String strAddress;\r\n        private Geocoder coder;\r\n\r\n        public MyThread(String strAddress, Geocoder coder){\r\n            this.strAddress=strAddress;\r\n            this.coder=coder;\r\n        }\r\n        @Override\r\n        public LatLng call() {\r\n            LatLng p1 = null;\r\n            List<Address> address;\r\n            try {\r\n                // May throw an IOException\r\n\r\n                //getting first 5 results of address\r\n                address = coder.getFromLocationName(strAddress, 5);\r\n                if (address == null) {\r\n                    return null;\r\n                }\r\n\r\n                if(address.size() < 1)\r\n                {\r\n                    //if location not found\r\n                    //Toast.makeText(context, \"Invalid Location\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                else\r\n                {\r\n                    //get lat lng from location\r\n                    Address location = address.get(0);\r\n                    p1 = new LatLng(location.getLatitude(), location.getLongitude() );\r\n                }\r\n\r\n\r\n            } catch (IOException ex) {\r\n\r\n                ex.printStackTrace();\r\n            }\r\n            return p1;\r\n        }\r\n\r\n    }\r\n    /**\r\n     * Get Location From Address\r\n     */\r\n    public LatLng getLocationFromAddress(Context context, String strAddress) {\r\n\r\n        //init\r\n        Geocoder coder = new Geocoder(context);\r\n        //get executer\r\n        ExecutorService service =  Executors.newSingleThreadExecutor();\r\n        //creating new thread\r\n        MyThread myThread = new MyThread(strAddress, coder);\r\n        //future variable to get the value after thread completed\r\n        Future<LatLng> future = service.submit(myThread);\r\n        //init p1\r\n        LatLng p1= null;\r\n        try {\r\n            //get LatLng result and give it to p1\r\n            p1 = future.get();\r\n        } catch (ExecutionException e) {\r\n            e.printStackTrace();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //return lat lng of location\r\n        return p1;\r\n    }\r\n\r\n    /**\r\n     * on fragment start\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(View.GONE);\r\n        Log.d(TAG, \"onStart: \"+getActivity().getSupportFragmentManager().getBackStackEntryCount());\r\n    }\r\n\r\n    /**\r\n     * on fragment stop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/pabs/Fragments/CreateEventFragment.java	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ app/src/main/java/com/example/pabs/Fragments/CreateEventFragment.java	(date 1607322283596)
-@@ -129,11 +129,13 @@
-             @Override
-             public void onClick(View view) {
- 
--                //if location field is empty
-                 if (!TextUtils.isEmpty(location_et.getText().toString())) {
-+                    //if location field is not empty
-+
-                     //getting lat and lng from location
-                     LatLng latLng = getLocationFromAddress(getActivity(), location_et.getText().toString());
- 
-+                    //if location is found
-                     if (latLng != null) {
- 
-                         //arraylist of Strings which will contain staff members
-@@ -159,6 +161,7 @@
-                             databaseEvent.setPriv_pub(dropdown.getSelectedItem().toString());
-                             databaseEvent.setStaff_members(arrayList);
-                             databaseEvent.setOwner_id(fireBaseUser.getUid());
-+                            //set basic thumbnail
-                             databaseEvent.setThumbnail("https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351");
- 
-                             //pushing databaseEvent to database
-@@ -168,16 +171,15 @@
-                             openEvent(databaseEvent);
-                         }
- 
--                        Log.d(TAG, "onClick: " + latLng);
--
-                         getAddress(latLng.latitude, latLng.longitude);
- 
--
-                     } else {
-+                        //if location is not found
-                         Toast.makeText(getActivity(), "Wrong location!", Toast.LENGTH_SHORT).show();
-                     }
-                 }
-                 else{
-+                    //if fields are empty
-                     Toast.makeText(getActivity(), "Empty Fields!", Toast.LENGTH_SHORT).show();
-                 }
-             }
-Index: app/src/main/java/com/example/pabs/EventActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.pabs;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Adapters.EventRecyclerViewAdapter;\r\nimport com.example.pabs.Fragments.CalendarFragment;\r\nimport com.example.pabs.Fragments.CreateEventFragment;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.Models.Event;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Main screen, handles more fragments, events, groups\r\n */\r\n\r\npublic class EventActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n\r\n    //UI\r\n    private ImageView create_event_img_btn;\r\n\r\n    //firebase\r\n    private DatabaseReference reference;\r\n    private String uID;\r\n\r\n    //events\r\n    List<Event> lstEvent;\r\n\r\n    List<DatabaseEvent> lstDatabaseEvent;\r\n\r\n    //drawer\r\n    private DrawerLayout drawer = null;\r\n    private NavigationView navigationView = null;\r\n\r\n    /**\r\n     * On create\r\n     */\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event);\r\n\r\n        //get uid of logged in user\r\n        uID = getIntent().getStringExtra(\"USER\");\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"USER\");\r\n\r\n        //set data for events example\r\n        lstEvent = new ArrayList<>();\r\n\r\n        //Getting events from database and setting them to recyclerview\r\n        DatabaseReference databaseEvents;\r\n        databaseEvents = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n        databaseEvents.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                clearEvents();\r\n                for (DataSnapshot event : snapshot.getChildren()) {\r\n                    //Loop 1 to go through all child nodes of users\r\n                    String temp= event.child(\"event_name\").getValue().toString();\r\n\r\n\r\n                    Uri myUri = null;\r\n                    String UriStr = null;\r\n\r\n                    if(event.child(\"thumbnail\").getValue() != null) {\r\n                        UriStr = event.child(\"thumbnail\").getValue().toString();\r\n                        Log.d(\"PAPA\", \"onDataChange: \"+UriStr);\r\n                        myUri = Uri.parse(UriStr);\r\n                    }\r\n\r\n                    Uri testUri = Uri.parse(\"https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351\");\r\n\r\n                    Event tempEv;\r\n                    if(UriStr == null){\r\n                        tempEv = new Event();\r\n                        tempEv.setTitle(temp);\r\n                        tempEv.setThumbnail(testUri);\r\n                    }\r\n                    else{\r\n                        tempEv = new Event();\r\n                        tempEv.setTitle(temp);\r\n                        tempEv.setThumbnail(myUri);\r\n                    }\r\n\r\n                    addToEventsArray(tempEv);\r\n                }\r\n                setEvents();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        //nav view and drawer\r\n        navigationView = findViewById(R.id.nav_view);\r\n        drawer = findViewById(R.id.drawer_layout);\r\n\r\n        //handle navigation drawer open/close with toggle\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, null, R.string.navigation_drawer_open, R.string.navigation_drawer_close){\r\n            /** Called when a drawer has settled in a completely closed state. */\r\n            public void onDrawerClosed(View view) {\r\n                super.onDrawerClosed(view);\r\n                for(int i = 0; i < navigationView.getMenu().size(); ++i)\r\n                    navigationView.getMenu().getItem(i).setChecked(false);\r\n            }\r\n\r\n            /** Called when a drawer has settled in a completely open state. */\r\n            public void onDrawerOpened(View drawerView) {\r\n                super.onDrawerOpened(drawerView);\r\n            }\r\n        };\r\n\r\n        //add toggle to drawer\r\n        drawer.addDrawerListener(toggle);\r\n\r\n        //sync toggle\r\n        toggle.syncState();\r\n\r\n        // Write a string to database when this client loses connection\r\n        reference.child(uID).child(\"online\").onDisconnect().setValue(\"false\");\r\n\r\n        //create event button\r\n        create_event_img_btn = findViewById(R.id.a_e_create_event_button);\r\n        create_event_img_btn.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    openCreateEventFragment();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Add to events inside DataChanged method so we don't lose the results\r\n     */\r\n    public void addToEventsArray(Event tempEv){\r\n        lstEvent.add(tempEv);\r\n    }\r\n\r\n    /**\r\n     * Clear events inside DataChanged method\r\n     */\r\n    public void clearEvents(){\r\n        lstEvent.clear();\r\n    }\r\n\r\n    /**\r\n     * Set events inside DataChanged method\r\n     */\r\n    public void setEvents(){\r\n        //create and set RecyclerView\r\n        RecyclerView myRv = (RecyclerView) findViewById(R.id.e_recycler_view);\r\n        //create Adapter with lstEvent in this context\r\n        EventRecyclerViewAdapter myAdapter = new EventRecyclerViewAdapter(this, lstEvent, getSupportFragmentManager());\r\n        //separate the Recyclerview to 3 columns\r\n        myRv.setLayoutManager(new GridLayoutManager(this, 3));\r\n        //set adapter for RecyclerView\r\n        myRv.setAdapter(myAdapter);\r\n    }\r\n\r\n    /**\r\n     * Called on selecting item from navigation list\r\n     */\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()){\r\n            case R.id.nav_events:\r\n                Toast.makeText(this, \"nav_events\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_calendar:\r\n                openCalendarFragment();\r\n                Toast.makeText(this, \"nav_calendar\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_groups:\r\n                Toast.makeText(this, \"nav_groups\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_profile:\r\n                Toast.makeText(this, \"nav_profile\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_settings:\r\n                Toast.makeText(this, \"nav_settings\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_logout:\r\n                Toast.makeText(this, \"nav_logout\", Toast.LENGTH_SHORT).show();\r\n                reference.child(uID).child(\"online\").setValue(\"false\");\r\n                finish();\r\n                break;\r\n\r\n            default:\r\n                Toast.makeText(this, \"error\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n\r\n        //close drawer on item clicked\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * open create event fragment\r\n     */\r\n    private void openCreateEventFragment(){\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new CreateEventFragment())\r\n                .addToBackStack(\"CreateEventFragment\")\r\n                .commit();\r\n    }\r\n\r\n    private void openCalendarFragment(){\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new CalendarFragment())\r\n                .addToBackStack(\"CalendarFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * Called when the activity is exiting\r\n     */\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        lstEvent.clear();\r\n        reference.child(uID).child(\"online\").setValue(\"false\");\r\n    }\r\n\r\n    /**\r\n     * Called when the activity started\r\n     */\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/pabs/EventActivity.java	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ app/src/main/java/com/example/pabs/EventActivity.java	(date 1607322063136)
-@@ -50,8 +50,6 @@
-     //events
-     List<Event> lstEvent;
- 
--    List<DatabaseEvent> lstDatabaseEvent;
--
-     //drawer
-     private DrawerLayout drawer = null;
-     private NavigationView navigationView = null;
-@@ -82,35 +80,45 @@
-             public void onDataChange(@NonNull DataSnapshot snapshot) {
-                 clearEvents();
-                 for (DataSnapshot event : snapshot.getChildren()) {
--                    //Loop 1 to go through all child nodes of users
-+                    //Loop 1 to go through all child nodes of events
-                     String temp= event.child("event_name").getValue().toString();
- 
--
-                     Uri myUri = null;
-                     String UriStr = null;
- 
-+                    //if the event has a thumbnail, get Uri
-                     if(event.child("thumbnail").getValue() != null) {
-                         UriStr = event.child("thumbnail").getValue().toString();
-                         Log.d("PAPA", "onDataChange: "+UriStr);
-                         myUri = Uri.parse(UriStr);
-                     }
- 
-+                    //get no image Uri
-                     Uri testUri = Uri.parse("https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351");
- 
-+                    //Create temporary Event
-                     Event tempEv;
-+
-+                    //if Event has no thumbnail
-                     if(UriStr == null){
-+                        //Give the event, the no image thumbnail
-                         tempEv = new Event();
-                         tempEv.setTitle(temp);
-                         tempEv.setThumbnail(testUri);
-                     }
-+                    //if Event has thumbnail
-                     else{
-+                        //Set thumbnail of event
-                         tempEv = new Event();
-                         tempEv.setTitle(temp);
-                         tempEv.setThumbnail(myUri);
-                     }
- 
-+                    //add events to array
-                     addToEventsArray(tempEv);
-                 }
-+
-+                //Set and show events on main screen
-                 setEvents();
-             }
- 
-@@ -246,6 +254,9 @@
-                 .commit();
-     }
- 
-+    /**
-+     * open calendar event fragment
-+     */
-     private void openCalendarFragment(){
-         getSupportFragmentManager()
-                 .beginTransaction()
-Index: app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.pabs.Adapters;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.Fragments.CreateEventFragment;\r\nimport com.example.pabs.Fragments.EventFragment;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.Models.Event;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Creates an array of card elements\r\n */\r\n\r\npublic class EventRecyclerViewAdapter extends RecyclerView.Adapter<EventRecyclerViewAdapter.MyViewHolder>{\r\n\r\n    private Context mContext;\r\n    private List<Event> mData;\r\n    private FragmentManager mFragment;\r\n\r\n    /**\r\n     * Constructor of EventRecyclerViewAdapter\r\n     */\r\n    public EventRecyclerViewAdapter(Context mContext, List<Event> mData, FragmentManager fragment) {\r\n        this.mContext = mContext;\r\n        this.mData = mData;\r\n        this.mFragment = fragment;\r\n    }\r\n\r\n    /**\r\n     * OnCreateViewHolder - layout initializer\r\n     */\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        //Init view and set view of viewHolder\r\n        View view;\r\n        LayoutInflater mInflater = LayoutInflater.from(mContext);\r\n        view = mInflater.inflate(R.layout.cardview_event, parent, false);\r\n        return new MyViewHolder(view);\r\n    }\r\n\r\n    /**\r\n     * Set data for every individual card\r\n     */\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final MyViewHolder holder, final int position) {\r\n\r\n        //set data\r\n        holder.tv_title.setText(mData.get(position).getTitle());\r\n\r\n        Picasso.get().load(mData.get(position).getThumbnail()).resize(400,400).centerCrop().into(holder.img_thumbnail);\r\n\r\n        //set click listener\r\n        holder.cardView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Toast.makeText(mContext, mData.get(position).getTitle(), Toast.LENGTH_SHORT).show();\r\n\r\n                //Getting events from database and setting them to recyclerview\r\n                DatabaseReference databaseEvents;\r\n                databaseEvents = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n                databaseEvents.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot event : snapshot.getChildren()) {\r\n                            //Loop to go through all child nodes of event\r\n\r\n                            //temp for storing data from database\r\n                            DatabaseEvent temp = new DatabaseEvent();\r\n                            //setting data to temp from database\r\n                            temp.setOwner_id(event.getKey());\r\n                            temp.setEvent_name(event.child(\"event_name\").getValue().toString());\r\n                            temp.setLocation_name(event.child(\"location_name\").getValue().toString());\r\n                            String tempx = event.child(\"location_x\").getValue().toString();\r\n                            temp.setLocation_x(Double.parseDouble(tempx));\r\n                            String tempy = event.child(\"location_y\").getValue().toString();\r\n                            temp.setLocation_y(Double.parseDouble(tempy));\r\n                            temp.setStart_date(event.child(\"start_date\").getValue().toString());\r\n                            temp.setEnd_date(event.child(\"end_date\").getValue().toString());\r\n                            temp.setPriv_pub(event.child(\"priv_pub\").getValue().toString());\r\n\r\n                            final List<String> staff_members =  new ArrayList<>();\r\n                            event.getRef().child(\"staff_members\").addValueEventListener(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n\r\n                                    for (DataSnapshot staff : snapshot.getChildren()) {\r\n                                        //Loop 1 to go through all child nodes of staff members\r\n                                        staff_members.add(staff.getValue().toString());\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n\r\n                            temp.setStaff_members(staff_members);\r\n\r\n                            if(event.child(\"thumbnail\").getValue() != null){\r\n                                temp.setThumbnail(event.child(\"thumbnail\").getValue().toString());\r\n                            }\r\n\r\n                            //open Event which matches with the title from the Database Event\r\n                            if(mData.get(position).getTitle() == temp.getEvent_name()){\r\n                                openEvent(temp);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Open Event Fragment with data\r\n     */\r\n    public void openEvent(DatabaseEvent databaseEvent){\r\n        mFragment\r\n                .beginTransaction()\r\n                .replace( R.id.fragment_event_container , new EventFragment(databaseEvent))\r\n                .addToBackStack(\"EventFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * Returns size of cards\r\n     */\r\n    @Override\r\n    public int getItemCount() {\r\n        return mData.size();\r\n    }\r\n\r\n    /**\r\n     * Creates card item\r\n     */\r\n    public static class MyViewHolder extends RecyclerView.ViewHolder{\r\n\r\n        //UI\r\n        TextView tv_title;\r\n        ImageView img_thumbnail;\r\n        CardView cardView;\r\n\r\n        /**\r\n         * Creates view for the item\r\n         */\r\n        public MyViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            //get UI as objects\r\n            tv_title = (TextView) itemView.findViewById(R.id.c_e_event_title);\r\n            img_thumbnail= (ImageView) itemView.findViewById(R.id.c_e_thumbnail);\r\n            cardView = (CardView) itemView.findViewById(R.id.card_event);\r\n\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java	(revision 79632489e53d6e74f3fbd1691ccb4c675e90df86)
-+++ app/src/main/java/com/example/pabs/Adapters/EventRecyclerViewAdapter.java	(date 1607322309186)
-@@ -123,8 +123,10 @@
-                                 }
-                             });
- 
-+                            //add staff members to event
-                             temp.setStaff_members(staff_members);
- 
-+                            //if event has a thumbnail add it to temp
-                             if(event.child("thumbnail").getValue() != null){
-                                 temp.setThumbnail(event.child("thumbnail").getValue().toString());
-                             }
-@@ -138,7 +140,7 @@
- 
-                     @Override
-                     public void onCancelled(@NonNull DatabaseError error) {
--
-+                    //if database failed
-                     }
-                 });
- 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM__Default_Changelist_.xml	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM__Default_Changelist_.xml	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM_[Default_Changelist]" date="1607322014512" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/7/2020 8:18 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM__Default_Changelist_.xml	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM__Default_Changelist_.xml	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM_[Default_Changelist]" date="1607325030857" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_9_10_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/7/2020 9:10 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM_[Default_Changelist]/shelved.patch	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_7_2020_8_18_AM_[Default_Changelist]/shelved.patch	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
@@ -1,285 +0,0 @@
-Index: app/src/main/java/com/example/pabs/Models/DatabaseEvent.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.pabs.Models;\r\n\r\nimport java.util.List;\r\n\r\npublic class DatabaseEvent {\r\n    String description;\r\n    String start_date;\r\n    String end_date;\r\n    String reminder;\r\n    String repetition;\r\n    String inv_code;\r\n    String event_name;\r\n    double location_x;\r\n    double location_y;\r\n    String location_name;\r\n    Long thumbnail;\r\n    String priv_pub;\r\n    List<String> staff_members;\r\n    String owner_id;\r\n\r\n\r\n    public DatabaseEvent(){};\r\n\r\n    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, Long thumbnail, String priv_pub, List<String> staff_members, String user_id) {\r\n        this.description = description;\r\n        this.start_date = start_date;\r\n        this.end_date = end_date;\r\n        this.reminder = reminder;\r\n        this.repetition = repetition;\r\n        this.inv_code = inv_code;\r\n        this.event_name = event_name;\r\n        this.location_x = location_x;\r\n        this.location_y = location_y;\r\n        this.location_name = location_name;\r\n        this.thumbnail = thumbnail;\r\n        this.priv_pub = priv_pub;\r\n        this.staff_members = staff_members;\r\n        this.owner_id = owner_id;\r\n    }\r\n\r\n    public String getOwner_id() {\r\n        return owner_id;\r\n    }\r\n\r\n    public void setOwner_id(String owner_id) {\r\n        this.owner_id = owner_id;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getStart_date() {\r\n        return start_date;\r\n    }\r\n\r\n    public void setStart_date(String start_date) {\r\n        this.start_date = start_date;\r\n    }\r\n\r\n    public String getEnd_date() {\r\n        return end_date;\r\n    }\r\n\r\n    public void setEnd_date(String end_date) {\r\n        this.end_date = end_date;\r\n    }\r\n\r\n    public String getReminder() {\r\n        return reminder;\r\n    }\r\n\r\n    public void setReminder(String reminder) {\r\n        this.reminder = reminder;\r\n    }\r\n\r\n    public String getRepetition() {\r\n        return repetition;\r\n    }\r\n\r\n    public void setRepetition(String repetition) {\r\n        this.repetition = repetition;\r\n    }\r\n\r\n    public String getInv_code() {\r\n        return inv_code;\r\n    }\r\n\r\n    public void setInv_code(String inv_code) {\r\n        this.inv_code = inv_code;\r\n    }\r\n\r\n    public String getEvent_name() {\r\n        return event_name;\r\n    }\r\n\r\n    public void setEvent_name(String event_name) {\r\n        this.event_name = event_name;\r\n    }\r\n\r\n    public double getLocation_x() {\r\n        return location_x;\r\n    }\r\n\r\n    public void setLocation_x(double location_x) {\r\n        this.location_x = location_x;\r\n    }\r\n\r\n    public double getLocation_y() {\r\n        return location_y;\r\n    }\r\n\r\n    public void setLocation_y(double location_y) {\r\n        this.location_y = location_y;\r\n    }\r\n\r\n    public String getLocation_name() {\r\n        return location_name;\r\n    }\r\n\r\n    public void setLocation_name(String location_name) {\r\n        this.location_name = location_name;\r\n    }\r\n\r\n    public Long getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    public void setThumbnail(Long thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    public String getPriv_pub() {\r\n        return priv_pub;\r\n    }\r\n\r\n    public void setPriv_pub(String priv_pub) {\r\n        this.priv_pub = priv_pub;\r\n    }\r\n\r\n    public List<String> getStaff_members() {\r\n        return staff_members;\r\n    }\r\n\r\n    public void setStaff_members(List<String> staff_members) {\r\n        this.staff_members = staff_members;\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-+++ app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(date 1607294759683)
-@@ -17,11 +17,12 @@
-     String priv_pub;
-     List<String> staff_members;
-     String owner_id;
-+    List<String> joined_users;
- 
- 
-     public DatabaseEvent(){};
- 
--    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, Long thumbnail, String priv_pub, List<String> staff_members, String user_id) {
-+    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, Long thumbnail, String priv_pub, List<String> staff_members, String user_id, List<String> joined_users) {
-         this.description = description;
-         this.start_date = start_date;
-         this.end_date = end_date;
-@@ -35,8 +36,13 @@
-         this.thumbnail = thumbnail;
-         this.priv_pub = priv_pub;
-         this.staff_members = staff_members;
--        this.owner_id = owner_id;
-+        this.owner_id = user_id;
-+        this.joined_users = joined_users;
-     }
-+
-+    public List<String> getJoined_users() { return joined_users; }
-+
-+    public void setJoined_users(List<String> joined_users) { this.joined_users = joined_users; }
- 
-     public String getOwner_id() {
-         return owner_id;
-Index: app/src/main/res/layout/fragment_calendar.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".Fragments.CalendarFragment\"\r\n    android:clickable=\"true\">\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:clickable=\"true\">\r\n\r\n        <!--<RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"100dp\"\r\n            android:id=\"@+id/c_toolbar\">\r\n\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/calendar_currentdate\"\r\n                android:text=\"2020/November/18\"\r\n                android:textSize=\"20dp\"/>\r\n\r\n            <AutoCompleteTextView\r\n                android:id=\"@+id/c_search_bar\"\r\n                android:layout_width=\"380dp\"\r\n                android:layout_height=\"50dp\"\r\n                android:fontFamily=\"@font/roboto_thin\"\r\n                android:hint=\"Search for events...\"\r\n                android:inputType=\"textAutoComplete|textAutoCorrect\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:textSize=\"18sp\"\r\n                android:layout_below=\"@+id/calendar_currentdate\">\r\n\r\n            </AutoCompleteTextView>\r\n\r\n        </RelativeLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/calendar_days\"\r\n            android:layout_below=\"@+id/c_toolbar\"\r\n            android:layout_centerHorizontal=\"true\">\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Mon\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Tue\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Wed\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Thu\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Fri\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Sat\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Sun\"\r\n                android:textSize=\"20dp\"\r\n                android:paddingLeft=\"10dp\"\r\n                android:paddingRight=\"10dp\"/>\r\n        </LinearLayout>\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/calendar_recycler_view\"\r\n            android:layout_below=\"@+id/calendar_days\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:paddingRight=\"5dp\"\r\n            android:paddingLeft=\"5dp\">\r\n        </androidx.recyclerview.widget.RecyclerView>-->\r\n        <!--<DatePicker\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"430dp\"\r\n            android:clickable=\"true\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:background=\"@color/white\"/>-->\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"75dp\"\r\n            android:id=\"@+id/calendar_upperpart\"\r\n            android:background=\"@color/black\">\r\n            <TextView\r\n                android:id=\"@+id/calendar_curr_date\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"MM/DD/YYYY\"\r\n                android:textColor=\"@color/white\"\r\n                android:textSize=\"30dp\"\r\n                android:padding=\"10dp\"\r\n                android:layout_centerVertical=\"true\"/>\r\n        </RelativeLayout>\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@+id/calendar_upperpart\"\r\n            android:id=\"@+id/calendar_day_container\"\r\n            android:background=\"@color/grey\">\r\n            <TextView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Curent_Month\"\r\n                android:id=\"@+id/calendar_curr_month\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:background=\"@color/quantum_amberA200\"/>\r\n            <LinearLayout\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/calendar_days\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:layout_below=\"@+id/calendar_curr_month\">\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Mon\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\" />\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Tue\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Wed\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Thu\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Fri\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Sat\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"Sun\"\r\n                    android:textSize=\"18dp\"\r\n                    android:paddingLeft=\"10dp\"\r\n                    android:paddingRight=\"10dp\"/>\r\n            </LinearLayout>\r\n        </RelativeLayout>\r\n\r\n        <sun.bob.mcalendarview.views.ExpCalendarView\r\n            android:layout_below=\"@+id/calendar_day_container\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/calendar_calendar\"\r\n            android:background=\"@color/white\"/>\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/calendar_rec_view\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@+id/calendar_calendar\"/>\r\n\r\n    </RelativeLayout>\r\n\r\n</FrameLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/layout/fragment_calendar.xml	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-+++ app/src/main/res/layout/fragment_calendar.xml	(date 1607294636101)
-@@ -11,105 +11,6 @@
-         android:layout_height="match_parent"
-         android:clickable="true">
- 
--        <!--<RelativeLayout
--            android:layout_width="match_parent"
--            android:layout_height="100dp"
--            android:id="@+id/c_toolbar">
--
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:id="@+id/calendar_currentdate"
--                android:text="2020/November/18"
--                android:textSize="20dp"/>
--
--            <AutoCompleteTextView
--                android:id="@+id/c_search_bar"
--                android:layout_width="380dp"
--                android:layout_height="50dp"
--                android:fontFamily="@font/roboto_thin"
--                android:hint="Search for events..."
--                android:inputType="textAutoComplete|textAutoCorrect"
--                android:layout_centerHorizontal="true"
--                android:textSize="18sp"
--                android:layout_below="@+id/calendar_currentdate">
--
--            </AutoCompleteTextView>
--
--        </RelativeLayout>
--
--        <LinearLayout
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:id="@+id/calendar_days"
--            android:layout_below="@+id/c_toolbar"
--            android:layout_centerHorizontal="true">
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Mon"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Tue"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Wed"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Thu"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Fri"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Sat"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--            <TextView
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="Sun"
--                android:textSize="20dp"
--                android:paddingLeft="10dp"
--                android:paddingRight="10dp"/>
--        </LinearLayout>
--
--        <androidx.recyclerview.widget.RecyclerView
--            android:id="@+id/calendar_recycler_view"
--            android:layout_below="@+id/calendar_days"
--            android:layout_width="wrap_content"
--            android:layout_height="match_parent"
--            android:layout_centerHorizontal="true"
--            android:paddingRight="5dp"
--            android:paddingLeft="5dp">
--        </androidx.recyclerview.widget.RecyclerView>-->
--        <!--<DatePicker
--            android:layout_width="wrap_content"
--            android:layout_height="430dp"
--            android:clickable="true"
--            android:layout_centerHorizontal="true"
--            android:background="@color/white"/>-->
-         <RelativeLayout
-             android:layout_width="match_parent"
-             android:layout_height="75dp"
-@@ -205,7 +106,7 @@
- 
-         <androidx.recyclerview.widget.RecyclerView
-             android:id="@+id/calendar_rec_view"
--            android:layout_width="wrap_content"
-+            android:layout_width="match_parent"
-             android:layout_height="wrap_content"
-             android:layout_below="@+id/calendar_calendar"/>
- 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-@@ -1,108 +0,0 @@
--Index: app/src/main/AndroidManifest.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.pabs\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    \r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme.NoActionBar\">\r\n\r\n        <activity android:name=\".RegisterActivity\" />\r\n        <activity  android:name=\".EventActivity\"/>\r\n\r\n        <activity android:name=\".LoginActivity\" >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <service\r\n            android:name=\".Fcm.MyFirebaseMessagingService\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n    </application>\r\n\r\n</manifest>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/AndroidManifest.xml	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/src/main/AndroidManifest.xml	(date 1605471146502)
--@@ -29,6 +29,9 @@
--                 <action android:name="com.google.firebase.MESSAGING_EVENT" />
--             </intent-filter>
--         </service>
--+        <meta-data
--+            android:name="preloaded_fonts"
--+            android:resource="@array/preloaded_fonts" />
-- 
--     </application>
-- 
--Index: app/src/main/java/com/example/pabs/EventActivity.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.pabs;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.pabs.Adapters.EventRecyclerViewAdapter;\r\nimport com.example.pabs.Models.Event;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Main screen, handles more fragments, events, groups\r\n */\r\n\r\npublic class EventActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n\r\n    //firebase\r\n    private DatabaseReference reference;\r\n    private String uID;\r\n\r\n    //events\r\n    List<Event> lstEvent;\r\n\r\n    //drawer\r\n    private DrawerLayout drawer = null;\r\n    private NavigationView navigationView = null;\r\n\r\n    /**\r\n     * On create\r\n     */\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event);\r\n\r\n        //get uid of logged in user\r\n        uID = getIntent().getStringExtra(\"USER\");\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"USER\");\r\n\r\n        //set data for events example\r\n        lstEvent = new ArrayList<>();\r\n\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n        lstEvent.add(new Event(\"Balette Eloadas\", R.drawable.balette_eloadas));\r\n        lstEvent.add(new Event(\"Football\", R.drawable.football));\r\n        lstEvent.add(new Event(\"Halloween Party\", R.drawable.halloween_party));\r\n        lstEvent.add(new Event(\"Hiking\", R.drawable.hiking));\r\n        lstEvent.add(new Event(\"Party at OFE\", R.drawable.party_at_ofe));\r\n        lstEvent.add(new Event(\"Wedding\", R.drawable.wedding));\r\n\r\n        //create and set RecyclerView\r\n        RecyclerView myRv = (RecyclerView) findViewById(R.id.e_recycler_view);\r\n        //create Adapter with lstEvent in this context\r\n        EventRecyclerViewAdapter myAdapter = new EventRecyclerViewAdapter(this, lstEvent);\r\n        //separate the Recyclerview to 3 columns\r\n        myRv.setLayoutManager(new GridLayoutManager(this, 3));\r\n        //set adapter for RecyclerView\r\n        myRv.setAdapter(myAdapter);\r\n\r\n        //nav view and drawer\r\n        navigationView = findViewById(R.id.nav_view);\r\n        drawer = findViewById(R.id.drawer_layout);\r\n\r\n        //handle navigation drawer open/close with toggle\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, null, R.string.navigation_drawer_open, R.string.navigation_drawer_close){\r\n            /** Called when a drawer has settled in a completely closed state. */\r\n            public void onDrawerClosed(View view) {\r\n                super.onDrawerClosed(view);\r\n                for(int i = 0; i < navigationView.getMenu().size(); ++i)\r\n                    navigationView.getMenu().getItem(i).setChecked(false);\r\n            }\r\n\r\n            /** Called when a drawer has settled in a completely open state. */\r\n            public void onDrawerOpened(View drawerView) {\r\n                super.onDrawerOpened(drawerView);\r\n            }\r\n        };\r\n\r\n        //add toggle to drawer\r\n        drawer.addDrawerListener(toggle);\r\n\r\n        //sync toggle\r\n        toggle.syncState();\r\n\r\n        // Write a string when this client loses connection\r\n        reference.child(uID).child(\"online\").onDisconnect().setValue(\"false\");\r\n    }\r\n\r\n    /**\r\n     * Called on selecting item from navigation list\r\n     */\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()){\r\n            case R.id.nav_events:\r\n                Toast.makeText(this, \"nav_events\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_calendar:\r\n                Toast.makeText(this, \"nav_calendar\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_groups:\r\n                Toast.makeText(this, \"nav_groups\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_profile:\r\n                Toast.makeText(this, \"nav_profile\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_settings:\r\n                Toast.makeText(this, \"nav_settings\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n            case R.id.nav_logout:\r\n                Toast.makeText(this, \"nav_logout\", Toast.LENGTH_SHORT).show();\r\n                reference.child(uID).child(\"online\").setValue(\"false\");\r\n                finish();\r\n                break;\r\n\r\n            default:\r\n                Toast.makeText(this, \"error\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n\r\n        //close drawer on item clicked\r\n        drawer.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/src/main/java/com/example/pabs/EventActivity.java	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/src/main/java/com/example/pabs/EventActivity.java	(date 1605511774921)
--@@ -18,6 +18,9 @@
-- import android.widget.Toast;
-- 
-- import com.example.pabs.Adapters.EventRecyclerViewAdapter;
--+import com.example.pabs.Fragments.CalendarFragment;
--+import com.example.pabs.Fragments.PasswordRecoveryFragment;
--+import com.example.pabs.Fragments.SettingsFragment;
-- import com.example.pabs.Models.Event;
-- import com.google.android.material.navigation.NavigationView;
-- import com.google.firebase.database.DatabaseReference;
--@@ -129,7 +132,12 @@
--                 Toast.makeText(this, "nav_events", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--+            case R.id.nav_todo:
--+                Toast.makeText(this, "nav_todo", Toast.LENGTH_SHORT).show();
--+                break;
--+
--             case R.id.nav_calendar:
--+                openCalendarFragment();
--                 Toast.makeText(this, "nav_calendar", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--@@ -142,6 +150,7 @@
--                 break;
-- 
--             case R.id.nav_settings:
--+                openSettingsFragment();
--                 Toast.makeText(this, "nav_settings", Toast.LENGTH_SHORT).show();
--                 break;
-- 
--@@ -160,4 +169,20 @@
--         drawer.closeDrawer(GravityCompat.START);
--         return true;
--     }
--+
--+    private void openCalendarFragment(){
--+        getSupportFragmentManager()
--+                .beginTransaction()
--+                .replace(R.id.drawer_layout, new CalendarFragment())
--+                .addToBackStack("CalendarFragment")
--+                .commit();
--+    }
--+
--+    private void openSettingsFragment(){
--+        getSupportFragmentManager()
--+                .beginTransaction()
--+                .replace(R.id.drawer_layout, new SettingsFragment())
--+                .addToBackStack("SettingsFragment")
--+                .commit();
--+    }
-- }
--\ No newline at end of file
--Index: app/build.gradle
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'  // Google Services plugin\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.1\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.pabs\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation \"androidx.cardview:cardview:1.0.0\"\r\n    implementation 'androidx.recyclerview:recyclerview:1.0.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.firebase:firebase-auth:19.3.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    // Import the BoM for the Firebase platform\r\n    implementation platform('com.google.firebase:firebase-bom:25.12.0')\r\n\r\n    // Declare the dependency for the Realtime Database library\r\n    // When using the BoM, you don't specify versions in Firebase library dependencies\r\n    implementation 'com.google.firebase:firebase-database'\r\n\r\n    // Add the dependency for the Firebase SDK for Google Analytics\r\n    // When using the BoM, don't specify versions in Firebase dependencies\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n\r\n    implementation 'com.google.firebase:firebase-auth'\r\n    implementation 'com.google.android.gms:play-services-gcm:17.0.0'\r\n\r\n    // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries\r\n    // When using the BoM, you don't specify versions in Firebase library dependencies\r\n    implementation 'com.google.firebase:firebase-messaging:20.1.0'\r\n\r\n    ///Navigation menu\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\r\n    implementation \"androidx.drawerlayout:drawerlayout:1.1.0\"\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
----- app/build.gradle	(revision c32a7afad370e7f0218f168a53c9f838e5207170)
--+++ app/build.gradle	(date 1605464849113)
--@@ -36,7 +36,7 @@
--     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
-- 
--     // Import the BoM for the Firebase platform
---    implementation platform('com.google.firebase:firebase-bom:25.12.0')
--+    implementation platform('com.google.firebase:firebase-bom:26.0.0')
-- 
--     // Declare the dependency for the Realtime Database library
--     // When using the BoM, you don't specify versions in Firebase library dependencies
--@@ -48,6 +48,8 @@
-- 
--     implementation 'com.google.firebase:firebase-auth'
--     implementation 'com.google.android.gms:play-services-gcm:17.0.0'
--+    // Also declare the dependency for the Google Play services library and specify its version
--+    implementation 'com.google.android.gms:play-services-auth:18.1.0'
-- 
--     // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries
--     // When using the BoM, you don't specify versions in Firebase library dependencies
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04__Default_Changelist_.xml	(revision 233a205f0a0eca3d3e913886d5d7f41cc053189b)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]" date="1605693960872" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2020__11__18__12_04_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2020. 11. 18. 12:04 [Default Changelist]" />
--</changelist>
-\ No newline at end of file
Index: app/src/main/java/com/example/pabs/Models/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Models;\r\n\r\nimport android.net.Uri;\r\n\r\n/**\r\n * Event cards\r\n */\r\n\r\npublic class Event {\r\n    private String Title;\r\n    private Uri Thumbnail;\r\n    private String StartDate;\r\n\r\n    public Event(){}\r\n\r\n    public Event(String title, Uri thumbnail, String startDate) {\r\n        Title = title;\r\n        Thumbnail = thumbnail;\r\n        StartDate = startDate;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return Title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        Title = title;\r\n    }\r\n\r\n    public Uri getThumbnail() {\r\n        return Thumbnail;\r\n    }\r\n\r\n    public void setThumbnail(Uri thumbnail) {\r\n        Thumbnail = thumbnail;\r\n    }\r\n\r\n    public String getStartDate() { return StartDate; }\r\n\r\n    public void setStartDate(String startDate) { StartDate = startDate; }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Models/Event.java	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ app/src/main/java/com/example/pabs/Models/Event.java	(date 1608124118695)
@@ -2,6 +2,8 @@
 
 import android.net.Uri;
 
+import java.util.List;
+
 /**
  * Event cards
  */
@@ -10,13 +12,23 @@
     private String Title;
     private Uri Thumbnail;
     private String StartDate;
+    public List<String> joined_members;
 
     public Event(){}
 
-    public Event(String title, Uri thumbnail, String startDate) {
+    public Event(String title, Uri thumbnail, String startDate, List<String> j_members) {
         Title = title;
         Thumbnail = thumbnail;
         StartDate = startDate;
+        joined_members = j_members;
+    }
+
+    public List<String> getJoined_members() {
+        return joined_members;
+    }
+
+    public void setJoined_members(List<String> joined_members) {
+        this.joined_members = joined_members;
     }
 
     public String getTitle() {
Index: app/src/main/java/com/example/pabs/Models/DatabaseEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Models;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Class to store Events from Firebase Database\r\n */\r\n\r\npublic class DatabaseEvent {\r\n    String description;\r\n    String start_date;\r\n    String end_date;\r\n    String reminder;\r\n    String repetition;\r\n    String inv_code;\r\n    String event_name;\r\n    double location_x;\r\n    double location_y;\r\n    String location_name;\r\n    String thumbnail;\r\n    String priv_pub;\r\n    List<String> staff_members;\r\n    String owner_id;\r\n\r\n\r\n    public DatabaseEvent(){};\r\n\r\n    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id) {\r\n        this.description = description;\r\n        this.start_date = start_date;\r\n        this.end_date = end_date;\r\n        this.reminder = reminder;\r\n        this.repetition = repetition;\r\n        this.inv_code = inv_code;\r\n        this.event_name = event_name;\r\n        this.location_x = location_x;\r\n        this.location_y = location_y;\r\n        this.location_name = location_name;\r\n        this.thumbnail = thumbnail;\r\n        this.priv_pub = priv_pub;\r\n        this.staff_members = staff_members;\r\n        this.owner_id = owner_id;\r\n    }\r\n\r\n    public String getOwner_id() {\r\n        return owner_id;\r\n    }\r\n\r\n    public void setOwner_id(String owner_id) {\r\n        this.owner_id = owner_id;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getStart_date() {\r\n        return start_date;\r\n    }\r\n\r\n    public void setStart_date(String start_date) {\r\n        this.start_date = start_date;\r\n    }\r\n\r\n    public String getEnd_date() {\r\n        return end_date;\r\n    }\r\n\r\n    public void setEnd_date(String end_date) {\r\n        this.end_date = end_date;\r\n    }\r\n\r\n    public String getReminder() {\r\n        return reminder;\r\n    }\r\n\r\n    public void setReminder(String reminder) {\r\n        this.reminder = reminder;\r\n    }\r\n\r\n    public String getRepetition() {\r\n        return repetition;\r\n    }\r\n\r\n    public void setRepetition(String repetition) {\r\n        this.repetition = repetition;\r\n    }\r\n\r\n    public String getInv_code() {\r\n        return inv_code;\r\n    }\r\n\r\n    public void setInv_code(String inv_code) {\r\n        this.inv_code = inv_code;\r\n    }\r\n\r\n    public String getEvent_name() {\r\n        return event_name;\r\n    }\r\n\r\n    public void setEvent_name(String event_name) {\r\n        this.event_name = event_name;\r\n    }\r\n\r\n    public double getLocation_x() {\r\n        return location_x;\r\n    }\r\n\r\n    public void setLocation_x(double location_x) {\r\n        this.location_x = location_x;\r\n    }\r\n\r\n    public double getLocation_y() {\r\n        return location_y;\r\n    }\r\n\r\n    public void setLocation_y(double location_y) {\r\n        this.location_y = location_y;\r\n    }\r\n\r\n    public String getLocation_name() {\r\n        return location_name;\r\n    }\r\n\r\n    public void setLocation_name(String location_name) {\r\n        this.location_name = location_name;\r\n    }\r\n\r\n    public String getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    public void setThumbnail(String thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    public String getPriv_pub() {\r\n        return priv_pub;\r\n    }\r\n\r\n    public void setPriv_pub(String priv_pub) {\r\n        this.priv_pub = priv_pub;\r\n    }\r\n\r\n    public List<String> getStaff_members() {\r\n        return staff_members;\r\n    }\r\n\r\n    public void setStaff_members(List<String> staff_members) {\r\n        this.staff_members = staff_members;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(revision b26c39fb8cfd4fa73a80d5960d4185a722cc1859)
+++ app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(date 1608070205347)
@@ -21,11 +21,11 @@
     String priv_pub;
     List<String> staff_members;
     String owner_id;
-
+    List<String> joined_members;
 
     public DatabaseEvent(){};
 
-    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id) {
+    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id, List<String> joined_members) {
         this.description = description;
         this.start_date = start_date;
         this.end_date = end_date;
@@ -39,8 +39,13 @@
         this.thumbnail = thumbnail;
         this.priv_pub = priv_pub;
         this.staff_members = staff_members;
-        this.owner_id = owner_id;
+        this.owner_id = user_id;
+        this.joined_members = joined_members;
     }
+
+    public List<String> getJoined_members() { return joined_members; }
+
+    public void setJoined_members(List<String> joined_members) { this.joined_members = joined_members; }
 
     public String getOwner_id() {
         return owner_id;
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_17_2020_11_36_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_17_2020_11_36_PM__Default_Changelist_.xml
