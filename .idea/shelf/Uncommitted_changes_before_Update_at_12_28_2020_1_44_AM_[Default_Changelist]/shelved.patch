Index: app/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:animateLayoutChanges=\"true\"\r\n    android:background=\"@drawable/login_background\">\r\n    android:visibility=\"visible\"\r\n    tools:context=\".LoginActivity\">\r\n\r\n    <!-- Draw your view whatever you want to draw -->\r\n    <FrameLayout\r\n        android:id=\"@+id/fragment_container_login\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n    <!--Screen-->\r\n    <RelativeLayout\r\n        android:id=\"@+id/ActivityLoginLayout\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_marginLeft=\"40dp\"\r\n        android:layout_marginRight=\"40dp\"\r\n        android:padding=\"10dp\">\r\n\r\n        <!--E-mail+Password+Buttons-->\r\n        <RelativeLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"visible\">\r\n\r\n            <!--E-mail+Password-->\r\n            <LinearLayout\r\n                android:id=\"@+id/l_linlay1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <!--E-mail-->\r\n                <EditText\r\n                    android:id=\"@+id/l_email\"\r\n                    android:text=\"demenyador@gmail.com\"\r\n                    android:maxLines=\"1\"\r\n                    android:imeOptions=\"actionNext\"\r\n                    android:nextFocusDown=\"@+id/l_login_button\"\r\n                    android:inputType=\"text\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:background=\"@drawable/email_bg\"\r\n                    android:drawableLeft=\"@drawable/member_ic\"\r\n                    android:drawablePadding=\"10dip\"\r\n                    android:ems=\"10\"\r\n                    android:fontFamily=\"@font/roboto_thin\"\r\n                    android:layout_marginBottom=\"20dp\"\r\n                    android:hint=\"e-mail\"\r\n                    android:padding=\"15dp\"\r\n                    android:textColorHint=\"#000000\"\r\n                    android:singleLine=\"true\"/>\r\n\r\n                <!--Password-->\r\n                <EditText\r\n                    android:text=\"123456\"\r\n                    android:id=\"@+id/l_password\"\r\n                    android:maxLines=\"1\"\r\n                    android:imeOptions=\"actionNext\"\r\n                    android:nextFocusDown=\"@+id/l_signup_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:background=\"@drawable/email_bg\"\r\n                    android:drawableLeft=\"@drawable/lock_ic\"\r\n                    android:drawablePadding=\"10dip\"\r\n                    android:ems=\"10\"\r\n                    android:fontFamily=\"@font/roboto_thin\"\r\n                    android:hint=\"password\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:padding=\"15dp\"\r\n                    android:textColorHint=\"#000000\"\r\n                    android:textSize=\"18sp\"\r\n                    android:singleLine=\"true\"/>\r\n\r\n            </LinearLayout>\r\n\r\n\r\n            <!--Forgot your password button-->\r\n            <Button\r\n                android:id=\"@+id/l_forgot_password\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"20dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:layout_below=\"@id/l_linlay1\"\r\n                android:background=\"@color/transparent\"\r\n                android:text=\"Forgot your password?\"\r\n                android:textAllCaps=\"false\"\r\n                android:textColor=\"#FFFFFF\"\r\n                android:textSize=\"14sp\" />\r\n\r\n            <!--Log In button-->\r\n            <Button\r\n                android:id=\"@+id/l_login_button\"\r\n                android:layout_width=\"160dp\"\r\n                android:layout_height=\"50dp\"\r\n                android:layout_below=\"@id/l_linlay1\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:layout_marginTop=\"60dp\"\r\n                android:fontFamily=\"sans-serif-medium\"\r\n                android:background=\"@drawable/login_button\"\r\n                android:radius=\"60dp\"\r\n                android:text=\"Log In\"\r\n                android:textAllCaps=\"false\"\r\n                android:textColor=\"#92129D\"\r\n                android:textSize=\"24sp\" />\r\n\r\n            <!--Don’t have an account? Create Button-->\r\n            <Button\r\n                android:id=\"@+id/l_register_button\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"20dp\"\r\n                android:layout_marginTop=\"20dp\"\r\n                android:layout_below=\"@id/l_login_button\"\r\n                android:background=\"@color/transparent\"\r\n                android:text=\"Don’t have an account? Create\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:textAllCaps=\"false\"\r\n                android:textColor=\"#FFFFFF\"\r\n                android:textSize=\"14sp\"  />\r\n\r\n        </RelativeLayout>\r\n    </RelativeLayout>\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_login.xml	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/res/layout/activity_login.xml	(date 1609088141856)
@@ -41,7 +41,7 @@
                 <!--E-mail-->
                 <EditText
                     android:id="@+id/l_email"
-                    android:text="demenyador@gmail.com"
+                    android:text="kutya@gmail.com"
                     android:maxLines="1"
                     android:imeOptions="actionNext"
                     android:nextFocusDown="@+id/l_login_button"
Index: app/src/main/java/com/example/pabs/Fragments/EventFragment/EventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments.EventFragment;\r\n\r\nimport android.app.Activity;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ContentResolver;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.provider.MediaStore;\r\nimport android.text.method.ScrollingMovementMethod;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.webkit.MimeTypeMap;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.MapView;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.Continuation;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.StorageTask;\r\nimport com.google.firebase.storage.UploadTask;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * Handle an event\r\n */\r\n\r\npublic class EventFragment extends Fragment implements OnMapReadyCallback, EventOptionsDialogFragment.EventOptionsDialogListener {\r\n\r\n    public static final int GET_FROM_GALLERY = 3;\r\n    private static final String TAG = \"EventFragment\";\r\n    public Uri imgUri;\r\n    //UI\r\n    private Button back_button;\r\n    private Button plus_button;\r\n    private View containerView;\r\n    private ProgressDialog mDialog = null;\r\n    private MapView mapView;\r\n    private TextView event_name_tv;\r\n    private TextView event_date_start_tv;\r\n    private TextView event_date_end_tv;\r\n    private TextView event_description_tv;\r\n    private TextView location_text_tv;\r\n    //map\r\n    private GoogleMap mMap;\r\n    //database event\r\n    private final DatabaseEvent databaseEvent;\r\n    //image handling\r\n    private ImageView image_view;\r\n    private StorageReference mStorageRef;\r\n    private StorageTask<UploadTask.TaskSnapshot> uploadTask;\r\n\r\n    private final String mUID;\r\n    private int mState;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public EventFragment(DatabaseEvent dbE, String uID) {\r\n        databaseEvent = dbE;\r\n        mUID = uID;\r\n    }\r\n\r\n    /**\r\n     * On Create\r\n     */\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    /**\r\n     * On Create View\r\n     */\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, final ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_event, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n\r\n        //init UI\r\n        event_name_tv = view.findViewById(R.id.fe_event_name);\r\n        event_date_start_tv = view.findViewById(R.id.fe_event_date_start);\r\n        event_date_end_tv = view.findViewById(R.id.fe_event_date_end);\r\n        event_description_tv = view.findViewById(R.id.fe_event_description);\r\n        location_text_tv = view.findViewById(R.id.fe_location_text);\r\n        image_view = view.findViewById(R.id.fe_event_image);\r\n\r\n        event_description_tv.setMovementMethod(new ScrollingMovementMethod());\r\n\r\n        if (databaseEvent.getThumbnail() != null) {\r\n            //set image if it's not null\r\n            Uri myUri = Uri.parse(databaseEvent.getThumbnail());\r\n\r\n            //Picasso license\r\n            Picasso.get().load(myUri).into(image_view);\r\n        }\r\n\r\n        if (databaseEvent.getDescription() != null) {\r\n            event_description_tv.setText(databaseEvent.getDescription());\r\n        }\r\n\r\n        //setting text in UI with databaseEvent data\r\n        event_name_tv.setText(databaseEvent.getEvent_name());\r\n        event_date_start_tv.setText(databaseEvent.getStart_date());\r\n        event_date_end_tv.setText(databaseEvent.getEnd_date());\r\n        event_description_tv.setText(databaseEvent.getDescription());\r\n        location_text_tv.setText(databaseEvent.getLocation_name());\r\n\r\n        //back button\r\n        back_button = view.findViewById(R.id.fe_back_button);\r\n\r\n        back_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //clear all backstack\r\n                clearBackstack();\r\n            }\r\n        });\r\n\r\n        //delete button to delete event\r\n        plus_button = view.findViewById(R.id.fe_plus_button);\r\n\r\n        plus_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                openEventOptionsDialogFragment();\r\n            }\r\n        });\r\n\r\n        //get reference to firebase storage \"Images/\" path\r\n        mStorageRef = FirebaseStorage.getInstance().getReference(\"Images\");\r\n\r\n        // Gets the MapView from the XML layout and creates it\r\n        mapView = (MapView) view.findViewById(R.id.fe_map);\r\n        mapView.onCreate(savedInstanceState);\r\n\r\n        //Sync Map View\r\n        mapView.getMapAsync(this);\r\n\r\n        mState = getStatus();\r\n\r\n        return view;\r\n    }\r\n\r\n    private int getStatus() {\r\n        if (mUID.equals(databaseEvent.getOwner_id())) {\r\n            //owner\r\n            return 0;\r\n        } else if (databaseEvent.getJoined_members().contains(mUID)) {\r\n            //member\r\n            return 1;\r\n        } else if (databaseEvent.getStaff_members().contains(mUID)) {\r\n            //staff\r\n            return 2;\r\n        } else {\r\n            //not joined\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * open event dialog fragment\r\n     */\r\n    private void openEventOptionsDialogFragment() {\r\n        EventOptionsDialogFragment eventOptionsDialogFragment = new EventOptionsDialogFragment();\r\n        eventOptionsDialogFragment.setListener(EventFragment.this, mState);\r\n        eventOptionsDialogFragment.setCancelable(false);\r\n        eventOptionsDialogFragment.show(getActivity().getSupportFragmentManager(), \"eventDialogFragment\");\r\n    }\r\n\r\n    /**\r\n     * delete Image\r\n     */\r\n    private void deleteImage(DataSnapshot dataSnapshot) {\r\n        //clear image\r\n        if (dataSnapshot.child(\"thumbnail\").getValue() != null) {\r\n            //init firebase storage\r\n            FirebaseStorage mFirebaseStorage = FirebaseStorage.getInstance();\r\n\r\n            //reference to photo shown in this event\r\n            StorageReference photoRef = mFirebaseStorage.getReferenceFromUrl(dataSnapshot.child(\"thumbnail\").getValue().toString());\r\n\r\n            //delete the photo from firebase storage\r\n            photoRef.delete().addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                @Override\r\n                public void onSuccess(Void aVoid) {\r\n                    // File deleted successfully\r\n                    Log.d(TAG, \"onSuccess: deleted file\");\r\n                }\r\n            }).addOnFailureListener(new OnFailureListener() {\r\n                @Override\r\n                public void onFailure(@NonNull Exception exception) {\r\n                    // Uh-oh, an error occurred!\r\n                    Log.d(TAG, \"onFailure: did not delete file\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fileUploader\r\n     */\r\n    private String getExtension(Uri uri) {\r\n        ContentResolver cr = getActivity().getContentResolver();\r\n        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();\r\n        return mimeTypeMap.getExtensionFromMimeType(cr.getType(uri));\r\n    }\r\n\r\n    private void fileUploader() {\r\n        //get reference to name\r\n        final StorageReference ref = mStorageRef.child(System.currentTimeMillis() + \".\" + getExtension(imgUri));\r\n\r\n        //set upload task to imgUri\r\n        uploadTask = ref.putFile(imgUri);\r\n\r\n        //dialog on loading\r\n        mDialog = new ProgressDialog(getActivity());\r\n\r\n        mDialog.setMessage(\"Please wait...\");\r\n        mDialog.setCancelable(false);\r\n        mDialog.show();\r\n\r\n        uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                //start upload\r\n                uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {\r\n                    @Override\r\n                    public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {\r\n                        if (!task.isSuccessful()) {\r\n                            throw task.getException();\r\n                        }\r\n                        // Continue with the task to get the download URL\r\n                        return ref.getDownloadUrl();\r\n\r\n                    }\r\n                }).addOnCompleteListener(new OnCompleteListener<Uri>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<Uri> task) {\r\n                        if (task.isSuccessful()) {\r\n                            //if image is uploaded\r\n                            Toast.makeText(getActivity(), \"Image uploaded succesfully\", Toast.LENGTH_SHORT).show();\r\n\r\n                            //get download Uri\r\n                            final Uri downloadUri = task.getResult();\r\n                            //reference to EVENT in firebase database\r\n                            final DatabaseReference refEvent = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n                            //connect firebase storage with firebase realtime database\r\n                            refEvent.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    for (DataSnapshot event : snapshot.getChildren()) {\r\n                                        //Loop 1 to go through all child nodes of users\r\n                                        if (event.child(\"event_name\").getValue() == databaseEvent.getEvent_name()) {\r\n\r\n                                            if (event.child(\"thumbnail\").getValue() == null) {\r\n                                                //set thumbnail if there is no image\r\n                                                setThumbnail(event.getKey(), refEvent, downloadUri);\r\n                                                databaseEvent.setThumbnail(downloadUri.toString());\r\n                                                Log.d(TAG, \"Nincs kep: \");\r\n                                            } else {\r\n                                                //if there is already and image delete it, and replace it with selected one\r\n                                                deleteImage(event);\r\n\r\n                                                setThumbnail(event.getKey(), refEvent, downloadUri);\r\n                                                databaseEvent.setThumbnail(downloadUri.toString());\r\n                                            }\r\n                                            mDialog.dismiss();\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n                                    //database failed\r\n                                }\r\n                            });\r\n\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                //upload task failed\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set Thumbnail\r\n     */\r\n    private void setThumbnail(String key, DatabaseReference ref, Uri downloadUri) {\r\n        ref.child(key).child(\"thumbnail\").setValue(downloadUri.toString());\r\n    }\r\n\r\n    /**\r\n     * Open Gallery\r\n     */\r\n    private void viewGallery() {\r\n        startActivityForResult(new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI), GET_FROM_GALLERY);\r\n    }\r\n\r\n    //called after viewGallery startActivityForResult returned in viewGallery\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        //Detects request codes\r\n        if (requestCode == GET_FROM_GALLERY && resultCode == Activity.RESULT_OK) {\r\n            Uri selectedImage = data.getData();\r\n            Bitmap bitmap = null;\r\n            try {\r\n                imgUri = data.getData();\r\n                image_view.setImageURI(imgUri);\r\n\r\n                bitmap = MediaStore.Images.Media.getBitmap(getActivity().getContentResolver(), selectedImage);\r\n                Log.d(TAG, \"Image Selected Successfully!\");\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * clearBackstack\r\n     */\r\n    public void clearBackstack() {\r\n        //clear all backstact\r\n        if (getActivity().getSupportFragmentManager().getBackStackEntryCount() == 1) {\r\n            getActivity().getSupportFragmentManager().popBackStack(\"EventFragment\", 1);\r\n        } else {\r\n            for (int i = 0; i < getActivity().getSupportFragmentManager().getBackStackEntryCount(); ++i) {\r\n                getActivity().getSupportFragmentManager().popBackStack();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * onMapReady\r\n     */\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n\r\n        //get lat lng from databaseEvent\r\n        LatLng eventLocation = new LatLng(databaseEvent.getLocation_x(), databaseEvent.getLocation_y());\r\n\r\n        //init mMap\r\n        mMap = googleMap;\r\n\r\n        //add marker to map to location from databaseEvent\r\n        mMap.addMarker(new MarkerOptions()\r\n                .position(eventLocation)\r\n                .title(databaseEvent.getLocation_name()));\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(eventLocation, 10));\r\n\r\n        //set on Map Click Listener\r\n        mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\r\n            @Override\r\n            public void onMapClick(LatLng latLng) {\r\n                Toast.makeText(getActivity(), \"Clicked on map\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * onStart\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(View.GONE);\r\n    }\r\n\r\n    /**\r\n     * onStop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    /**\r\n     * onResume\r\n     */\r\n    @Override\r\n    public void onResume() {\r\n        mapView.onResume();\r\n        super.onResume();\r\n    }\r\n\r\n    /**\r\n     * on fragment stop\r\n     */\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        mapView.onPause();\r\n    }\r\n\r\n    /**\r\n     * onDestroy\r\n     */\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        mapView.onDestroy();\r\n    }\r\n\r\n    /**\r\n     * onLowMemory\r\n     */\r\n    @Override\r\n    public void onLowMemory() {\r\n        super.onLowMemory();\r\n        mapView.onLowMemory();\r\n    }\r\n\r\n    @Override\r\n    public void UpCh() {\r\n        viewGallery();\r\n\r\n        final Handler handler = new Handler();\r\n        final int delay = 1000; //milliseconds\r\n\r\n        handler.postDelayed(new Runnable() {\r\n            public void run() {\r\n                if (imgUri != null) {\r\n                    //if we have an image selected\r\n                    if (uploadTask != null && uploadTask.isInProgress()) {\r\n                        //if upload is not finished\r\n                        Toast.makeText(getActivity(), \"Upload in progress\", Toast.LENGTH_SHORT).show();\r\n                    } else {\r\n                        //if upload is not started\r\n                        fileUploader();\r\n                    }\r\n                } else\r\n                    handler.postDelayed(this, delay);\r\n            }\r\n        }, delay);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void Repetition() {\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new EventRepetitionFragment(databaseEvent))\r\n                .addToBackStack(\"EventRepetitionFragment\")\r\n                .commit();\r\n    }\r\n\r\n    @Override\r\n    public void AddKickStaff() {\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new EventStaffFragment(databaseEvent))\r\n                .addToBackStack(\"EventStaffFragment\")\r\n                .commit();\r\n    }\r\n\r\n    @Override\r\n    public void Reminder() {\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new EventReminderFragment(databaseEvent))\r\n                .addToBackStack(\"EventReminderFragment\")\r\n                .commit();\r\n    }\r\n\r\n    @Override\r\n    public void Description() {\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new EventDescriptionFragment(databaseEvent))\r\n                .addToBackStack(\"EventDescriptionFragment\")\r\n                .commit();\r\n    }\r\n\r\n    @Override\r\n    public void CloseEvent() {\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference();\r\n        Query applesQuery = ref.child(\"EVENT\").orderByChild(\"event_name\").equalTo(databaseEvent.getEvent_name());\r\n\r\n        applesQuery.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot appleSnapshot : dataSnapshot.getChildren()) {\r\n                    //clear image\r\n                    deleteImage(appleSnapshot);\r\n\r\n                    //delete selected event\r\n                    appleSnapshot.getRef().removeValue();\r\n\r\n                    //clear it from backstack\r\n                    clearBackstack();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n                //database failed\r\n                Log.e(\"EventFragment\", \"onCancelled\", databaseError.toException());\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void JoinLeaveEvent() {\r\n        final DatabaseReference refEvent = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n        refEvent.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (final DataSnapshot event : snapshot.getChildren()) {\r\n                    //Loop 1 to go through all child nodes of users\r\n                    if (event.child(\"event_name\").getValue() == databaseEvent.getEvent_name()) {\r\n                        if (mState == 3) {\r\n                            databaseEvent.addToJoinedListEnd(mUID);\r\n                            event.getRef().child(\"joined_members\").setValue(databaseEvent.getJoined_members());\r\n                            mState = 1;\r\n                        } else {\r\n                            databaseEvent.deleteJoinedListElement(mUID);\r\n                            event.getRef().child(\"joined_members\").setValue(databaseEvent.getJoined_members());\r\n                            mState = 3;\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void ToDo() {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/EventFragment/EventFragment.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Fragments/EventFragment/EventFragment.java	(date 1609112243896)
@@ -527,16 +527,21 @@
         applesQuery.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(DataSnapshot dataSnapshot) {
-                for (DataSnapshot appleSnapshot : dataSnapshot.getChildren()) {
-                    //clear image
-                    deleteImage(appleSnapshot);
+                if(dataSnapshot.exists()){
+                    for (DataSnapshot appleSnapshot : dataSnapshot.getChildren()) {
+                        //clear image
+                        deleteImage(appleSnapshot);
 
-                    //delete selected event
-                    appleSnapshot.getRef().removeValue();
+                        //delete selected event
+                        appleSnapshot.getRef().removeValue();
 
-                    //clear it from backstack
-                    clearBackstack();
+                        //clear it from backstack
+                        clearBackstack();
+                    }
                 }
+                else {
+                    Toast.makeText(getActivity(), "Event has been deleted!", Toast.LENGTH_SHORT).show();
+                }
             }
 
             @Override
@@ -553,21 +558,26 @@
         refEvent.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
-                for (final DataSnapshot event : snapshot.getChildren()) {
-                    //Loop 1 to go through all child nodes of users
-                    if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
-                        if (mState == 3) {
-                            databaseEvent.addToJoinedListEnd(mUID);
-                            event.getRef().child("joined_members").setValue(databaseEvent.getJoined_members());
-                            mState = 1;
-                        } else {
-                            databaseEvent.deleteJoinedListElement(mUID);
-                            event.getRef().child("joined_members").setValue(databaseEvent.getJoined_members());
-                            mState = 3;
-                        }
+                if(snapshot.exists()){
+                    for (final DataSnapshot event : snapshot.getChildren()) {
+                        //Loop 1 to go through all child nodes of users
+                        if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
+                            if (mState == 3) {
+                                databaseEvent.addToJoinedListEnd(mUID);
+                                event.getRef().child("joined_members").setValue(databaseEvent.getJoined_members());
+                                mState = 1;
+                            } else {
+                                databaseEvent.deleteJoinedListElement(mUID);
+                                event.getRef().child("joined_members").setValue(databaseEvent.getJoined_members());
+                                mState = 3;
+                            }
 
+                        }
                     }
                 }
+                else{
+                    Toast.makeText(getActivity(), "Event has been deleted!", Toast.LENGTH_SHORT).show();
+                }
 
             }
 
Index: app/src/main/java/com/example/pabs/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.pabs.Fragments.NicknameDialogFragment;\r\nimport com.example.pabs.Fragments.PasswordRecoveryFragment;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.messaging.FirebaseMessaging;\r\n\r\n/**\r\n * Handles login for users\r\n */\r\n\r\npublic class LoginActivity extends AppCompatActivity implements NicknameDialogFragment.NicknameDialogListener {\r\n\r\n    //DEBUG\r\n    private static final String TAG = \"LoginActivity\";\r\n\r\n    //UI\r\n    private EditText email_et = null, password_et = null;\r\n    private Button forgot_password_btn = null, login_btn = null, register_btn = null;\r\n    private ProgressDialog mDialog = null;\r\n\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n    private FirebaseAuth mAuth = null;\r\n    private FirebaseUser user = null;\r\n    private String token = null;\r\n\r\n    /**\r\n     * on create\r\n     */\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        //edittext\r\n        email_et = findViewById(R.id.l_email);\r\n        password_et = findViewById(R.id.l_password);\r\n\r\n        //button\r\n        forgot_password_btn = findViewById(R.id.l_forgot_password);\r\n        login_btn = findViewById(R.id.l_login_button);\r\n        register_btn = findViewById(R.id.l_register_button);\r\n\r\n        //open forgotPasswordFragment\r\n        forgot_password_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                openPasswordRecoveryFragment();\r\n            }\r\n        });\r\n\r\n        //open RegisterActivity\r\n        register_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                openRegisterActivity();\r\n            }\r\n        });\r\n\r\n        //login click listener\r\n        login_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //dialog on loading\r\n                mDialog = new ProgressDialog(LoginActivity.this);\r\n\r\n                mDialog.setMessage(\"Please wait...\");\r\n                mDialog.setCancelable(false);\r\n                mDialog.show();\r\n\r\n\r\n                login_btn.setClickable(false);\r\n                //check internet connection\r\n                if (isInternetConnectionActivated()) {\r\n                    //internet is active\r\n                    login();\r\n                } else {\r\n                    //internet is not active\r\n                    new AlertDialog.Builder(LoginActivity.this)\r\n                            .setTitle(\"No internet connection!\")\r\n                            .setMessage(\"Please enable your internet to login!\")\r\n                            // A null listener allows the button to dismiss the dialog and take no further action.\r\n                            .setPositiveButton(\"Okay\", null)\r\n                            .setIcon(android.R.drawable.ic_dialog_alert)\r\n                            .show();\r\n                    login_btn.setClickable(true);\r\n                    mDialog.dismiss();\r\n                }\r\n            }\r\n        });\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"USER\");\r\n\r\n        // Initialize Firebase Auth\r\n        mAuth = FirebaseAuth.getInstance();\r\n    }\r\n\r\n    /**\r\n     * Check internet connection\r\n     */\r\n    private boolean isInternetConnectionActivated() {\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        //we are connected to a network\r\n        //we are not connected to a network\r\n        return connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState() == NetworkInfo.State.CONNECTED ||\r\n                connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState() == NetworkInfo.State.CONNECTED;\r\n    }\r\n\r\n    /**\r\n     * Set token to avoid losing it\r\n     */\r\n    private void setToken(String s) {\r\n        this.token = s;\r\n    }\r\n\r\n    /**\r\n     * Login\r\n     */\r\n    private void login() {\r\n\r\n        // check if fields are empty\r\n        if (!TextUtils.isEmpty(email_et.getText().toString()) && !TextUtils.isEmpty(password_et.getText().toString())) {\r\n\r\n            //get information from the edit text fields\r\n            final String email = email_et.getText().toString();\r\n            final String password = password_et.getText().toString();\r\n\r\n            //get token for user\r\n            FirebaseMessaging.getInstance().getToken()\r\n                    .addOnCompleteListener(new OnCompleteListener<String>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<String> task) {\r\n                            if (!task.isSuccessful()) {\r\n                                Log.w(TAG, \"Fetching FCM registration token failed\", task.getException());\r\n                                return;\r\n                            }\r\n\r\n                            // Get new FCM registration token\r\n                            token = task.getResult();\r\n                            //we have to use a setter else we lose the information inside onComplete\r\n                            setToken(token);\r\n                        }\r\n                    });\r\n\r\n            //Sign in using auth(email, pass)\r\n            mAuth.signInWithEmailAndPassword(email, password)\r\n                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<AuthResult> task) {\r\n                            if (task.isSuccessful()) {\r\n                                // Sign in success\r\n                                user = mAuth.getCurrentUser();\r\n\r\n                                //Verify if user has nickname\r\n                                reference.child(user.getUid()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                        //check if user is online\r\n                                        if (snapshot.child(\"online\").getValue().equals(\"false\")) {\r\n                                            //check if use has a nickname\r\n                                            if (snapshot.child(\"nickname\").getValue().equals(\"\")) {\r\n                                                //set nickname\r\n                                                openNicknameDialogFragment();\r\n                                                //settings\r\n                                                login_btn.setClickable(true);\r\n                                                mDialog.dismiss();\r\n                                            } else {\r\n                                                //proceed to next activity\r\n                                                loginSuccessful();\r\n                                                //settings\r\n                                                mDialog.dismiss();\r\n                                            }\r\n                                        } else {\r\n                                            Log.d(TAG, \"User is already online!\");\r\n                                            Toast.makeText(LoginActivity.this, \"User is already online!\", Toast.LENGTH_SHORT).show();\r\n                                            //settings\r\n                                            login_btn.setClickable(true);\r\n                                            mDialog.dismiss();\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n                                        //database error\r\n                                        login_btn.setClickable(true);\r\n                                        //settings\r\n                                        mDialog.dismiss();\r\n                                        Log.w(TAG, \"On cancelled: \" + error);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                // If sign in fails, display a message to the user.\r\n                                Toast.makeText(LoginActivity.this, \"Authentication failed.\", Toast.LENGTH_SHORT).show();\r\n                                //settings\r\n                                login_btn.setClickable(true);\r\n                                mDialog.dismiss();\r\n                            }\r\n                        }\r\n                    });\r\n        } else {\r\n            // If sign in fails, display a message to the user.\r\n            Toast.makeText(LoginActivity.this, \"Wrong E-mail or Password!\", Toast.LENGTH_SHORT).show();\r\n            //settings\r\n            login_btn.setClickable(true);\r\n            mDialog.dismiss();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * apply nickname on dialog pressed OK\r\n     */\r\n    @Override\r\n    public void applyNickname(String nickname) {\r\n        reference.child(user.getUid()).child(\"nickname\").setValue(nickname);\r\n        loginSuccessful();\r\n    }\r\n\r\n    /**\r\n     * login successful\r\n     */\r\n    private void loginSuccessful() {\r\n        Toast.makeText(LoginActivity.this, \"Login Successful!\", Toast.LENGTH_SHORT).show();\r\n\r\n        //settings for user\r\n        reference.child(user.getUid()).child(\"online\").setValue(\"true\");\r\n        reference.child(user.getUid()).child(\"token\").setValue(token);\r\n\r\n        openEventActivity();\r\n    }\r\n\r\n    /**\r\n     * open nickname dialog fragment\r\n     */\r\n    private void openNicknameDialogFragment() {\r\n        NicknameDialogFragment nicknameDialogFragment = new NicknameDialogFragment();\r\n        nicknameDialogFragment.show(getSupportFragmentManager(), \"nicknameDialogFragment\");\r\n    }\r\n\r\n    /**\r\n     * open forgot password fragment\r\n     */\r\n    private void openPasswordRecoveryFragment() {\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_container_login, new PasswordRecoveryFragment())\r\n                .addToBackStack(\"PasswordRecoveryFragment\")\r\n                .commit();\r\n    }\r\n\r\n    /**\r\n     * open register activity\r\n     */\r\n    private void openRegisterActivity() {\r\n        Intent intent = new Intent(this, RegisterActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * open event activity\r\n     */\r\n    protected void openEventActivity() {\r\n        Intent intent = new Intent(this, EventActivity.class);\r\n        intent.putExtra(\"USER\", user.getUid());\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        login_btn.setClickable(true);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/LoginActivity.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/LoginActivity.java	(date 1609111248300)
@@ -28,9 +28,13 @@
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.Query;
 import com.google.firebase.database.ValueEventListener;
 import com.google.firebase.messaging.FirebaseMessaging;
 
+import java.util.Date;
+import java.util.concurrent.TimeUnit;
+
 /**
  * Handles login for users
  */
@@ -255,9 +259,40 @@
         reference.child(user.getUid()).child("online").setValue("true");
         reference.child(user.getUid()).child("token").setValue(token);
 
+        deleteOutDatedEvents();
+
         openEventActivity();
     }
 
+    /**
+     * Delete outDated Events
+     */
+    private void deleteOutDatedEvents() {
+        DatabaseReference databaseReferenceEvents;
+        databaseReferenceEvents = FirebaseDatabase.getInstance().getReference().child("EVENT");
+
+        Date date = new Date();
+        //This method returns the time in millis
+        final long timeMilli = date.getTime();
+
+        databaseReferenceEvents.addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(DataSnapshot snapshot) {
+                for (DataSnapshot event: snapshot.getChildren()) {
+                    if(event.child("timestamp").getValue(Long.class) != null){
+                        if(event.child("timestamp").getValue(Long.class) < timeMilli){
+                            event.getRef().removeValue();
+                        }
+                    }
+                }
+            }
+
+            @Override
+            public void onCancelled(DatabaseError databaseError) {
+            }
+        });
+    }
+
     /**
      * open nickname dialog fragment
      */
Index: app/src/main/java/com/example/pabs/Models/DatabaseEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Models;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Class to store Events from Firebase Database\r\n */\r\n\r\npublic class DatabaseEvent {\r\n    String description;\r\n    String start_date;\r\n    String end_date;\r\n    String reminder;\r\n    String repetition;\r\n    String inv_code;\r\n    String event_name;\r\n    double location_x;\r\n    double location_y;\r\n    String location_name;\r\n    String thumbnail;\r\n    String priv_pub;\r\n    List<String> staff_members;\r\n    String owner_id;\r\n    List<String> joined_members;\r\n\r\n    public DatabaseEvent() {\r\n    }\r\n\r\n    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id, List<String> joined_members) {\r\n        this.description = description;\r\n        this.start_date = start_date;\r\n        this.end_date = end_date;\r\n        this.reminder = reminder;\r\n        this.repetition = repetition;\r\n        this.inv_code = inv_code;\r\n        this.event_name = event_name;\r\n        this.location_x = location_x;\r\n        this.location_y = location_y;\r\n        this.location_name = location_name;\r\n        this.thumbnail = thumbnail;\r\n        this.priv_pub = priv_pub;\r\n        this.staff_members = staff_members;\r\n        this.owner_id = user_id;\r\n        this.joined_members = joined_members;\r\n    }\r\n\r\n    public List<String> getJoined_members() {\r\n        return joined_members;\r\n    }\r\n\r\n    public void setJoined_members(List<String> joined_members) {\r\n        this.joined_members = joined_members;\r\n    }\r\n\r\n    public String getOwner_id() {\r\n        return owner_id;\r\n    }\r\n\r\n    public void setOwner_id(String owner_id) {\r\n        this.owner_id = owner_id;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getStart_date() {\r\n        return start_date;\r\n    }\r\n\r\n    public void setStart_date(String start_date) {\r\n        this.start_date = start_date;\r\n    }\r\n\r\n    public String getEnd_date() {\r\n        return end_date;\r\n    }\r\n\r\n    public void setEnd_date(String end_date) {\r\n        this.end_date = end_date;\r\n    }\r\n\r\n    public String getReminder() {\r\n        return reminder;\r\n    }\r\n\r\n    public void setReminder(String reminder) {\r\n        this.reminder = reminder;\r\n    }\r\n\r\n    public String getRepetition() {\r\n        return repetition;\r\n    }\r\n\r\n    public void setRepetition(String repetition) {\r\n        this.repetition = repetition;\r\n    }\r\n\r\n    public String getInv_code() {\r\n        return inv_code;\r\n    }\r\n\r\n    public void setInv_code(String inv_code) {\r\n        this.inv_code = inv_code;\r\n    }\r\n\r\n    public String getEvent_name() {\r\n        return event_name;\r\n    }\r\n\r\n    public void setEvent_name(String event_name) {\r\n        this.event_name = event_name;\r\n    }\r\n\r\n    public double getLocation_x() {\r\n        return location_x;\r\n    }\r\n\r\n    public void setLocation_x(double location_x) {\r\n        this.location_x = location_x;\r\n    }\r\n\r\n    public double getLocation_y() {\r\n        return location_y;\r\n    }\r\n\r\n    public void setLocation_y(double location_y) {\r\n        this.location_y = location_y;\r\n    }\r\n\r\n    public String getLocation_name() {\r\n        return location_name;\r\n    }\r\n\r\n    public void setLocation_name(String location_name) {\r\n        this.location_name = location_name;\r\n    }\r\n\r\n    public String getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    public void setThumbnail(String thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    public String getPriv_pub() {\r\n        return priv_pub;\r\n    }\r\n\r\n    public void setPriv_pub(String priv_pub) {\r\n        this.priv_pub = priv_pub;\r\n    }\r\n\r\n    public List<String> getStaff_members() {\r\n        return staff_members;\r\n    }\r\n\r\n    public void setStaff_members(List<String> staff_members) {\r\n        this.staff_members = staff_members;\r\n    }\r\n\r\n    public void addToStaffListEnd(String str) {\r\n        staff_members.add(str);\r\n    }\r\n\r\n    public void deleteStaffListElement(String str) {\r\n        staff_members.remove(str);\r\n    }\r\n\r\n    public void addToJoinedListEnd(String str) {\r\n        joined_members.add(str);\r\n    }\r\n\r\n    public void deleteJoinedListElement(String str) {\r\n        joined_members.remove(str);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Models/DatabaseEvent.java	(date 1609108888721)
@@ -22,11 +22,12 @@
     List<String> staff_members;
     String owner_id;
     List<String> joined_members;
+    long timestamp;
 
     public DatabaseEvent() {
     }
 
-    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id, List<String> joined_members) {
+    public DatabaseEvent(String description, String start_date, String end_date, String reminder, String repetition, String inv_code, String event_name, double location_x, double location_y, String location_name, String thumbnail, String priv_pub, List<String> staff_members, String user_id, List<String> joined_members, long timestamp) {
         this.description = description;
         this.start_date = start_date;
         this.end_date = end_date;
@@ -42,6 +43,7 @@
         this.staff_members = staff_members;
         this.owner_id = user_id;
         this.joined_members = joined_members;
+        this.timestamp = timestamp;
     }
 
     public List<String> getJoined_members() {
@@ -179,4 +181,12 @@
     public void deleteJoinedListElement(String str) {
         joined_members.remove(str);
     }
+
+    public long getTimestamp() {
+        return timestamp;
+    }
+
+    public void setTimestamp(long timestamp) {
+        this.timestamp = timestamp;
+    }
 }
Index: app/src/main/java/com/example/pabs/Fragments/EventFragment/EventReminderFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments.EventFragment;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class EventReminderFragment extends Fragment {\r\n\r\n    private View containerView;\r\n\r\n    //database event\r\n    private final DatabaseEvent databaseEvent;\r\n\r\n    private SwitchCompat sw;\r\n    private ImageView iv;\r\n    private Spinner sp;\r\n    private TextView tv;\r\n    private Button bt;\r\n\r\n    private boolean switch_on = false;\r\n\r\n    EventReminderFragment(DatabaseEvent dE) {\r\n        databaseEvent = dE;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_event_reminder, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n\r\n        sw = view.findViewById(R.id.f_e_r_sw);\r\n        iv = view.findViewById(R.id.f_e_r_iv);\r\n        sp = view.findViewById(R.id.f_e_r_sp);\r\n        tv = view.findViewById(R.id.f_e_r_rl3_tv);\r\n        bt = view.findViewById(R.id.f_e_r_btn);\r\n\r\n        iv.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                clearBackstack();\r\n            }\r\n        });\r\n\r\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),\r\n                R.array.reminder, android.R.layout.simple_spinner_item);\r\n        // Specify the layout to use when the list of choices appears\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        sp.setAdapter(adapter);\r\n\r\n        sp.setVisibility(View.GONE);\r\n        tv.setVisibility(View.GONE);\r\n\r\n        if (databaseEvent.getReminder() != null) {\r\n            if (!databaseEvent.getReminder().equals(\"\")) {\r\n                sp.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.VISIBLE);\r\n                sw.setChecked(true);\r\n                switch_on = true;\r\n\r\n                ArrayList<String> reminderArr = new ArrayList<>();\r\n                reminderArr.add(\"daily\");\r\n                reminderArr.add(\"weekly\");\r\n                reminderArr.add(\"monthly\");\r\n                int i = reminderArr.indexOf(databaseEvent.getReminder());\r\n                sp.setSelection(i);\r\n            }\r\n        }\r\n\r\n\r\n        sw.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                if (isChecked) {\r\n                    //switch on\r\n                    sp.setVisibility(View.VISIBLE);\r\n                    tv.setVisibility(View.VISIBLE);\r\n                    switch_on = true;\r\n                } else {\r\n                    //switch off\r\n                    sp.setVisibility(View.GONE);\r\n                    tv.setVisibility(View.GONE);\r\n                    switch_on = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        bt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final DatabaseReference refEvent = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n                refEvent.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (final DataSnapshot event : snapshot.getChildren()) {\r\n                            //Loop 1 to go through all child nodes of users\r\n                            if (event.child(\"event_name\").getValue() == databaseEvent.getEvent_name()) {\r\n                                if (switch_on) {\r\n                                    databaseEvent.setReminder(sp.getSelectedItem().toString());\r\n                                } else {\r\n                                    databaseEvent.setReminder(\"\");\r\n                                }\r\n                                event.getRef().child(\"reminder\").setValue(databaseEvent.getReminder());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n                        //database failed\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n\r\n    /**\r\n     * clearBackstack\r\n     */\r\n    public void clearBackstack() {\r\n        //clear all backstact\r\n        getActivity().getSupportFragmentManager().popBackStack(\"EventReminderFragment\", 1);\r\n    }\r\n\r\n    /**\r\n     * onStart\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(View.GONE);\r\n    }\r\n\r\n    /**\r\n     * onStop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/EventFragment/EventReminderFragment.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Fragments/EventFragment/EventReminderFragment.java	(date 1609112006892)
@@ -10,6 +10,7 @@
 import android.widget.ImageView;
 import android.widget.Spinner;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.widget.SwitchCompat;
@@ -119,17 +120,23 @@
                 refEvent.addListenerForSingleValueEvent(new ValueEventListener() {
                     @Override
                     public void onDataChange(@NonNull DataSnapshot snapshot) {
-                        for (final DataSnapshot event : snapshot.getChildren()) {
-                            //Loop 1 to go through all child nodes of users
-                            if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
-                                if (switch_on) {
-                                    databaseEvent.setReminder(sp.getSelectedItem().toString());
-                                } else {
-                                    databaseEvent.setReminder("");
-                                }
-                                event.getRef().child("reminder").setValue(databaseEvent.getReminder());
+                        if(snapshot.exists()){
+                            for (final DataSnapshot event : snapshot.getChildren()) {
+                                //Loop 1 to go through all child nodes of users
+                                if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
+                                    if (switch_on) {
+                                        databaseEvent.setReminder(sp.getSelectedItem().toString());
+                                    } else {
+                                        databaseEvent.setReminder("");
+                                    }
+                                    event.getRef().child("reminder").setValue(databaseEvent.getReminder());
+                                }
                             }
                         }
+                        else{
+                            Toast.makeText(getActivity(), "Event has been deleted!", Toast.LENGTH_SHORT).show();
+                        }
+
                     }
 
                     @Override
Index: app/src/main/java/com/example/pabs/Fragments/EventFragment/CreateEventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments.EventFragment;\r\n\r\nimport android.content.Context;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.pabs.HelperClass.DateInputMask;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport static android.view.View.GONE;\r\n\r\n/**\r\n * Creates a new event\r\n */\r\n\r\npublic class CreateEventFragment extends Fragment {\r\n\r\n    private static final String TAG = \"CreateEventFragment\";\r\n\r\n    //UI\r\n    private View containerView;\r\n    private Button back_button;\r\n    private Button next_button;\r\n    private EditText start_date_et;\r\n    private EditText end_date_et;\r\n    private EditText name_et;\r\n    private Spinner dropdown;\r\n    private Spinner group_dropdown;\r\n    private EditText location_et;\r\n    private FrameLayout FragmentEventContainer;\r\n\r\n    private  ArrayList<String> availableGroups;\r\n\r\n    private TextView groupTv;\r\n\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n    private DatabaseReference databaseGroupReference;\r\n\r\n    private final String mUID;\r\n\r\n    public CreateEventFragment(String uID) {\r\n        mUID = uID;\r\n    }\r\n\r\n    /**\r\n     * on fragment created\r\n     */\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    /**\r\n     * on view created\r\n     */\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View CreateEventView = inflater.inflate(R.layout.fragment_create_event, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n        //\r\n        FragmentEventContainer = getActivity().findViewById(R.id.fragment_event_container);\r\n\r\n        //back button\r\n        back_button = CreateEventView.findViewById(R.id.c_e_back_button);\r\n\r\n\r\n        back_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                getActivity().getSupportFragmentManager().popBackStack(\"CreateEventFragment\", 1);\r\n            }\r\n        });\r\n\r\n        //date edit text\r\n        //start date\r\n        start_date_et = CreateEventView.findViewById(R.id.c_e_event_start_date_edit);\r\n\r\n        new DateInputMask(start_date_et);\r\n\r\n        //end date\r\n        end_date_et = CreateEventView.findViewById(R.id.c_e_event_end_date_edit);\r\n\r\n        new DateInputMask(end_date_et);\r\n\r\n        availableGroups = new ArrayList<>();\r\n\r\n        //spinner\r\n        //get the spinner from the xml.\r\n        dropdown = CreateEventView.findViewById(R.id.c_e_public_private_spinner);\r\n        group_dropdown = CreateEventView.findViewById(R.id.c_e_private_group_spinner);\r\n        groupTv = CreateEventView.findViewById(R.id.c_e_public_group_text);\r\n\r\n        //create a list of items for the spinner.\r\n        String[] items = new String[]{\"Public\", \"Private\"};\r\n        //create an adapter to describe how the items are displayed, adapters are used in several places in android.\r\n        //There are multiple variations of this, but this is the basic variant.\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_dropdown_item, items);\r\n        //set the spinners adapter to the previously created one.\r\n        dropdown.setAdapter(adapter);\r\n\r\n        dropdown.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // your code here\r\n                if(position == 0){\r\n                    groupTv.setVisibility(View.GONE);\r\n                    group_dropdown.setVisibility(View.GONE);\r\n                }else{\r\n                    groupTv.setVisibility(View.VISIBLE);\r\n                    group_dropdown.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n\r\n        final ArrayAdapter<String> groupAdapter = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_dropdown_item, availableGroups);\r\n        //set the spinners adapter to the previously created one.\r\n        group_dropdown.setAdapter(groupAdapter);\r\n\r\n        databaseGroupReference = FirebaseDatabase.getInstance().getReference().child(\"GROUP\");\r\n        databaseGroupReference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for(final DataSnapshot group : snapshot.getChildren()){\r\n\r\n                    //if he is owner\r\n                    if ((group.child(\"group_owner\").getValue().toString()).equals(mUID)) {\r\n                        availableGroups.add(group.child(\"group_name\").getValue().toString());\r\n\r\n                        groupAdapter.notifyDataSetChanged();\r\n                    }\r\n                    else{\r\n                    //if he is joined in group\r\n                        group.getRef().child(\"joined_members\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                for(DataSnapshot user : snapshot.getChildren()) {\r\n                                    if (user.getValue() != null && group.child(\"group_name\").getValue() != null) {\r\n                                        if ((user.getValue().toString()).equals(mUID)) {\r\n                                            availableGroups.add(group.child(\"group_name\").getValue().toString());\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                groupAdapter.notifyDataSetChanged();\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n        //location\r\n        location_et = CreateEventView.findViewById(R.id.c_e_event_location_edit);\r\n\r\n        //event name\r\n        name_et = CreateEventView.findViewById(R.id.c_e_event_name_edit);\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n\r\n        //next button\r\n        next_button = CreateEventView.findViewById(R.id.c_e_next_button);\r\n        next_button.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                if (!TextUtils.isEmpty(location_et.getText().toString())) {\r\n                    //if location field is not empty\r\n\r\n                    //getting lat and lng from location\r\n                    LatLng latLng = getLocationFromAddress(getActivity(), location_et.getText().toString());\r\n\r\n                    //if location is found\r\n                    if (latLng != null) {\r\n                        //getting user logged in\r\n                        FirebaseUser fireBaseUser = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n                        //check for empty fields\r\n                        if (!TextUtils.isEmpty(name_et.getText().toString()) && !TextUtils.isEmpty(start_date_et.getText().toString()) && !TextUtils.isEmpty(end_date_et.getText().toString())) {\r\n                            //new Database created from field contents written in by user\r\n                            if(isDateAfter(start_date_et.getText().toString(), end_date_et.getText().toString())){\r\n                                final DatabaseEvent databaseEvent = new DatabaseEvent();\r\n                                databaseEvent.setLocation_x(latLng.latitude);\r\n                                databaseEvent.setLocation_y(latLng.longitude);\r\n                                databaseEvent.setEvent_name(name_et.getText().toString());\r\n                                databaseEvent.setLocation_name(location_et.getText().toString());\r\n                                databaseEvent.setStart_date(start_date_et.getText().toString());\r\n                                databaseEvent.setEnd_date(end_date_et.getText().toString());\r\n                                databaseEvent.setPriv_pub(dropdown.getSelectedItem().toString());\r\n                                databaseEvent.setOwner_id(fireBaseUser.getUid());\r\n                                //set basic thumbnail\r\n                                //databaseEvent.setThumbnail(\"https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351\");\r\n\r\n                                if (databaseEvent.getPriv_pub().equals(\"Private\")) {\r\n                                    databaseGroupReference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                        @Override\r\n                                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                            for (DataSnapshot group : snapshot.getChildren()) {\r\n                                                if (group.child(\"group_name\").getValue() != null) {\r\n                                                    if ((group.child(\"group_name\").getValue().toString()).equals(group_dropdown.getSelectedItem().toString())) {\r\n                                                        final ArrayList<String> joined_members = new ArrayList<>();\r\n                                                        group.child(\"joined_members\").getRef().addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                            @Override\r\n                                                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                                for (DataSnapshot member : snapshot.getChildren()) {\r\n                                                                    joined_members.add(member.getValue().toString());\r\n                                                                }\r\n                                                                databaseEvent.setJoined_members(joined_members);\r\n\r\n                                                                //pushing databaseEvent to database\r\n                                                                reference.push().setValue(databaseEvent);\r\n\r\n                                                                //open event\r\n                                                                openEvent(databaseEvent);\r\n                                                            }\r\n\r\n                                                            @Override\r\n                                                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                            }\r\n                                                        });\r\n                                                        break;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    //pushing databaseEvent to database\r\n                                    reference.push().setValue(databaseEvent);\r\n\r\n                                    //open event\r\n                                    openEvent(databaseEvent);\r\n                                }\r\n\r\n                        }else{\r\n                                //if starting date > ending date\r\n                                Toast.makeText(getActivity(), \"Wrong date!\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        getAddress(latLng.latitude, latLng.longitude);\r\n\r\n                    } else {\r\n                        //if location is not found\r\n                        Toast.makeText(getActivity(), \"Wrong location!\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                } else {\r\n                    //if fields are empty\r\n                    Toast.makeText(getActivity(), \"Empty Fields!\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n\r\n        //return view\r\n        return CreateEventView;\r\n    }\r\n\r\n\r\n    public static boolean isDateAfter(String startDate,String endDate)\r\n    {\r\n        try\r\n        {\r\n            String myFormatString = \"yyyy/MM/dd\"; // for example\r\n            SimpleDateFormat df = new SimpleDateFormat(myFormatString);\r\n            Date date1 = df.parse(endDate);\r\n            Date startingDate = df.parse(startDate);\r\n\r\n            if (date1.after(startingDate) || date1.equals(startingDate))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * open EventFragment with Data of created event\r\n     */\r\n    public void openEvent(DatabaseEvent databaseEvent) {\r\n        getActivity().getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .replace(R.id.fragment_event_container, new EventFragment(databaseEvent, mUID))\r\n                .addToBackStack(\"EventFragment\")\r\n                .commit();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Address from location\r\n     */\r\n    public void getAddress(double lat, double lng) {\r\n        try {\r\n            //init\r\n            Geocoder geo = new Geocoder(getActivity().getApplicationContext(), Locale.getDefault());\r\n            //get location address from lat lng\r\n            List<Address> addresses = geo.getFromLocation(lat, lng, 5);\r\n            if (addresses.isEmpty()) {\r\n                Log.d(TAG, \"Waiting for Location\");\r\n            } else {\r\n                if (addresses.size() > 0) {\r\n                    //if location from lat lng was found write address\r\n                    Log.d(TAG, addresses.get(0).getAddressLine(0) + \", \" + addresses.get(0).getFeatureName() + \", \" + addresses.get(0).getLocality() + \", \" + addresses.get(0).getAdminArea() + \", \" + addresses.get(0).getCountryName());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            //if location lat lng was not found\r\n            Log.d(TAG, \"No Location Name Found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Location From Address\r\n     */\r\n    public LatLng getLocationFromAddress(Context context, String strAddress) {\r\n\r\n        //init\r\n        Geocoder coder = new Geocoder(context);\r\n        //get executer\r\n        ExecutorService service = Executors.newSingleThreadExecutor();\r\n        //creating new thread\r\n        MyThread myThread = new MyThread(strAddress, coder);\r\n        //future variable to get the value after thread completed\r\n        Future<LatLng> future = service.submit(myThread);\r\n        //init p1\r\n        LatLng p1 = null;\r\n        try {\r\n            //get LatLng result and give it to p1\r\n            p1 = future.get();\r\n        } catch (ExecutionException e) {\r\n            e.printStackTrace();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //return lat lng of location\r\n        return p1;\r\n    }\r\n\r\n    /**\r\n     * on fragment start\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(GONE);\r\n        Log.d(TAG, \"onStart: \" + getActivity().getSupportFragmentManager().getBackStackEntryCount());\r\n    }\r\n\r\n    /**\r\n     * on fragment stop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    /**\r\n     * Thread for handling the location search, to avoid UI failure\r\n     */\r\n    public class MyThread implements Callable<LatLng> {\r\n\r\n        private final String strAddress;\r\n        private final Geocoder coder;\r\n\r\n        public MyThread(String strAddress, Geocoder coder) {\r\n            this.strAddress = strAddress;\r\n            this.coder = coder;\r\n        }\r\n\r\n        @Override\r\n        public LatLng call() {\r\n            LatLng p1 = null;\r\n            List<Address> address;\r\n            try {\r\n                // May throw an IOException\r\n\r\n                //getting first 5 results of address\r\n                address = coder.getFromLocationName(strAddress, 5);\r\n                if (address == null) {\r\n                    return null;\r\n                }\r\n\r\n                if (address.size() < 1) {\r\n                    //if location not found\r\n                    //Toast.makeText(context, \"Invalid Location\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    //get lat lng from location\r\n                    Address location = address.get(0);\r\n                    p1 = new LatLng(location.getLatitude(), location.getLongitude());\r\n                }\r\n\r\n\r\n            } catch (IOException ex) {\r\n\r\n                ex.printStackTrace();\r\n            }\r\n            return p1;\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/EventFragment/CreateEventFragment.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Fragments/EventFragment/CreateEventFragment.java	(date 1609109562835)
@@ -34,9 +34,11 @@
 import com.google.firebase.database.ValueEventListener;
 
 import java.io.IOException;
+import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
 import java.util.Locale;
@@ -230,75 +232,136 @@
                     //if location field is not empty
 
                     //getting lat and lng from location
-                    LatLng latLng = getLocationFromAddress(getActivity(), location_et.getText().toString());
+                    final LatLng latLng = getLocationFromAddress(getActivity(), location_et.getText().toString());
 
                     //if location is found
                     if (latLng != null) {
                         //getting user logged in
-                        FirebaseUser fireBaseUser = FirebaseAuth.getInstance().getCurrentUser();
+                        final FirebaseUser fireBaseUser = FirebaseAuth.getInstance().getCurrentUser();
 
                         //check for empty fields
                         if (!TextUtils.isEmpty(name_et.getText().toString()) && !TextUtils.isEmpty(start_date_et.getText().toString()) && !TextUtils.isEmpty(end_date_et.getText().toString())) {
                             //new Database created from field contents written in by user
                             if(isDateAfter(start_date_et.getText().toString(), end_date_et.getText().toString())){
-                                final DatabaseEvent databaseEvent = new DatabaseEvent();
-                                databaseEvent.setLocation_x(latLng.latitude);
-                                databaseEvent.setLocation_y(latLng.longitude);
-                                databaseEvent.setEvent_name(name_et.getText().toString());
-                                databaseEvent.setLocation_name(location_et.getText().toString());
-                                databaseEvent.setStart_date(start_date_et.getText().toString());
-                                databaseEvent.setEnd_date(end_date_et.getText().toString());
-                                databaseEvent.setPriv_pub(dropdown.getSelectedItem().toString());
-                                databaseEvent.setOwner_id(fireBaseUser.getUid());
-                                //set basic thumbnail
-                                //databaseEvent.setThumbnail("https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351");
+
+                                DatabaseReference databaseEventReference;
+                                databaseEventReference = FirebaseDatabase.getInstance().getReference().child("EVENT");
+
+                                databaseEventReference.addListenerForSingleValueEvent(new ValueEventListener() {
+                                    @Override
+                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                                        boolean user_name_is_occupied = false;
+
+                                        for (DataSnapshot user : snapshot.getChildren()) {
+                                            if(user.child("event_name").getValue().toString().equals(name_et.getText().toString())){
+                                                user_name_is_occupied = true;
+                                            }
+                                        }
+
+                                        if(!user_name_is_occupied){
+                                            final DatabaseEvent databaseEvent = new DatabaseEvent();
+                                            databaseEvent.setLocation_x(latLng.latitude);
+                                            databaseEvent.setLocation_y(latLng.longitude);
+                                            databaseEvent.setEvent_name(name_et.getText().toString());
+                                            databaseEvent.setLocation_name(location_et.getText().toString());
+                                            databaseEvent.setStart_date(start_date_et.getText().toString());
+                                            databaseEvent.setEnd_date(end_date_et.getText().toString());
+                                            databaseEvent.setPriv_pub(dropdown.getSelectedItem().toString());
+                                            databaseEvent.setOwner_id(fireBaseUser.getUid());
+                                            //set basic thumbnail
+                                            //databaseEvent.setThumbnail("https://firebasestorage.googleapis.com/v0/b/pabs-fa777.appspot.com/o/Images%2FNo_image_3x4.svg.png?alt=media&token=1a73a7ae-0447-4827-87c9-9ed1bb463351");
 
-                                if (databaseEvent.getPriv_pub().equals("Private")) {
-                                    databaseGroupReference.addListenerForSingleValueEvent(new ValueEventListener() {
-                                        @Override
-                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
-                                            for (DataSnapshot group : snapshot.getChildren()) {
-                                                if (group.child("group_name").getValue() != null) {
-                                                    if ((group.child("group_name").getValue().toString()).equals(group_dropdown.getSelectedItem().toString())) {
-                                                        final ArrayList<String> joined_members = new ArrayList<>();
-                                                        group.child("joined_members").getRef().addListenerForSingleValueEvent(new ValueEventListener() {
-                                                            @Override
-                                                            public void onDataChange(@NonNull DataSnapshot snapshot) {
-                                                                for (DataSnapshot member : snapshot.getChildren()) {
-                                                                    joined_members.add(member.getValue().toString());
-                                                                }
-                                                                databaseEvent.setJoined_members(joined_members);
+                                            if (databaseEvent.getPriv_pub().equals("Private")) {
+                                                databaseGroupReference.addListenerForSingleValueEvent(new ValueEventListener() {
+                                                    @Override
+                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                                                        for (DataSnapshot group : snapshot.getChildren()) {
+                                                            if (group.child("group_name").getValue() != null) {
+                                                                if ((group.child("group_name").getValue().toString()).equals(group_dropdown.getSelectedItem().toString())) {
+                                                                    final ArrayList<String> joined_members = new ArrayList<>();
+                                                                    group.child("joined_members").getRef().addListenerForSingleValueEvent(new ValueEventListener() {
+                                                                        @Override
+                                                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
+                                                                            for (DataSnapshot member : snapshot.getChildren()) {
+                                                                                joined_members.add(member.getValue().toString());
+                                                                            }
+
+                                                                            DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
+                                                                            Date date = null;
+                                                                            try {
+                                                                                date = (Date)formatter.parse(databaseEvent.getEnd_date() +" "+"00"+":"+"00"+":"+"00");
+
+                                                                                date.setYear(date.getDay() + 1);
+
+                                                                                databaseEvent.setTimestamp(date.getTime());
+
+                                                                                databaseEvent.setJoined_members(joined_members);
 
-                                                                //pushing databaseEvent to database
-                                                                reference.push().setValue(databaseEvent);
+                                                                                String tempID = reference.push().getKey();
+
+                                                                                reference.child(tempID).setValue(databaseEvent);
 
-                                                                //open event
-                                                                openEvent(databaseEvent);
-                                                            }
+                                                                                //open event
+                                                                                openEvent(databaseEvent);
+                                                                            } catch (ParseException e) {
+                                                                                e.printStackTrace();
+                                                                            }
+
+                                                                        }
 
-                                                            @Override
-                                                            public void onCancelled(@NonNull DatabaseError error) {
+                                                                        @Override
+                                                                        public void onCancelled(@NonNull DatabaseError error) {
 
-                                                            }
-                                                        });
-                                                        break;
-                                                    }
-                                                }
-                                            }
-                                        }
+                                                                        }
+                                                                    });
+                                                                    break;
+                                                                }
+                                                            }
+                                                        }
+                                                    }
 
-                                        @Override
-                                        public void onCancelled(@NonNull DatabaseError error) {
+                                                    @Override
+                                                    public void onCancelled(@NonNull DatabaseError error) {
 
-                                        }
-                                    });
-                                } else {
-                                    //pushing databaseEvent to database
-                                    reference.push().setValue(databaseEvent);
+                                                    }
+                                                });
+                                            } else {
+
+                                                DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
+                                                Date date = null;
+                                                try {
+                                                    date = (Date)formatter.parse(databaseEvent.getEnd_date() +" "+"00"+":"+"00"+":"+"00");
+
+                                                    Calendar c = Calendar.getInstance();
+                                                    c.setTime(date);
+                                                    c.add(Calendar.DATE, 1);
+                                                    date = c.getTime();
+
+                                                    databaseEvent.setTimestamp(date.getTime());
+
+                                                    String tempID = reference.push().getKey();
+
+                                                    reference.child(tempID).setValue(databaseEvent);
 
-                                    //open event
-                                    openEvent(databaseEvent);
-                                }
+                                                    //open event
+                                                    openEvent(databaseEvent);
+                                                } catch (ParseException e) {
+                                                    e.printStackTrace();
+                                                }
+
+                                            }
+                                        }
+                                        else{
+                                            Toast.makeText(getActivity(), "Name of event is already occupied", Toast.LENGTH_SHORT).show();
+                                        }
+
+                                    }
+
+                                    @Override
+                                    public void onCancelled(@NonNull DatabaseError error) {
+
+                                    }
+                                });
 
                         }else{
                                 //if starting date > ending date
Index: app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Adapters;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.HelperClass.ToDoList;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * Creates an array of card elements\r\n */\r\n\r\npublic class ToDoRecyclerViewAdapter extends RecyclerView.Adapter<ToDoRecyclerViewAdapter.MyToDoViewHolder>{\r\n\r\n    private RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool();\r\n    private List<ToDoList> toDoList;\r\n\r\n    public ToDoRecyclerViewAdapter(List<ToDoList> toDoList) {\r\n        this.toDoList = toDoList;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyToDoViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i)\r\n    {\r\n        // Here we inflate the corresponding\r\n        // layout of the parent item\r\n        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.mytodo_list_row, viewGroup, false);\r\n\r\n        return new MyToDoViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final MyToDoViewHolder parentViewHolder, int position)\r\n    {\r\n        //firebase\r\n        final DatabaseReference referenceDB = FirebaseDatabase.getInstance().getReference().child(\"TODO\");\r\n\r\n        // Create an instance of the ParentItem\r\n        // class for the given position\r\n        ToDoList todolist = toDoList.get(position);\r\n\r\n        // For the created instance,\r\n        // get the title and set it\r\n        // as the text for the TextView\r\n        parentViewHolder.toDoListTitle.setText(todolist.getToDoListTitle());\r\n        parentViewHolder.delete_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                referenceDB.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        int i=0;\r\n                        for(DataSnapshot todo : snapshot.getChildren()){\r\n                            if(i == parentViewHolder.getAdapterPosition()){\r\n                               todo.getRef().child(\"taskList\").removeValue();\r\n                            }\r\n                            ++i;\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Create a layout manager\r\n        // to assign a layout\r\n        // to the RecyclerView.\r\n\r\n        // Here we have assigned the layout\r\n        // as LinearLayout with vertical orientation\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(parentViewHolder.childRecyclerView.getContext(), LinearLayoutManager.VERTICAL, false);\r\n\r\n        // Since this is a nested layout, so\r\n        // to define how many child items\r\n        // should be prefetched when the\r\n        // child RecyclerView is nested\r\n        // inside the parent RecyclerView,\r\n        // we use the following method\r\n        layoutManager.setInitialPrefetchItemCount(todolist.getTaskList().size());\r\n\r\n        // Create an instance of the child\r\n        // item view adapter and set its\r\n        // adapter, layout manager and RecyclerViewPool\r\n        TaskRecyclerViewAdapter childItemAdapter = new TaskRecyclerViewAdapter(todolist.getTaskList());\r\n        parentViewHolder.childRecyclerView.setLayoutManager(layoutManager);\r\n        parentViewHolder.childRecyclerView.setAdapter(childItemAdapter);\r\n        parentViewHolder.childRecyclerView.setRecycledViewPool(viewPool);\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return toDoList.size();\r\n    }\r\n\r\n    // This class is to initialize\r\n    // the Views present in\r\n    // the parent RecyclerView\r\n    class MyToDoViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private TextView toDoListTitle;\r\n        private Button delete_btn;\r\n        private RecyclerView childRecyclerView;\r\n\r\n        MyToDoViewHolder(final View itemView)\r\n        {\r\n            super(itemView);\r\n\r\n            toDoListTitle = itemView.findViewById(R.id.belong);\r\n            delete_btn = itemView.findViewById(R.id.todo_delete_btn);\r\n            childRecyclerView = itemView.findViewById(R.id.task_list);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Adapters/ToDoRecyclerViewAdapter.java	(date 1609103263824)
@@ -1,19 +1,16 @@
 package com.example.pabs.Adapters;
 
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.example.pabs.HelperClass.ToDoList;
+import com.example.pabs.Models.ToDoList;
 import com.example.pabs.R;
 import com.google.firebase.database.DataSnapshot;
 import com.google.firebase.database.DatabaseError;
Index: app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments;\r\n\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\n\r\nimport com.example.pabs.Adapters.CalendarRecyclerViewAdapter;\r\nimport com.example.pabs.Adapters.ToDoRecyclerViewAdapter;\r\nimport com.example.pabs.HelperClass.TaskList;\r\nimport com.example.pabs.HelperClass.ToDoList;\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport sun.bob.mcalendarview.MarkStyle;\r\nimport sun.bob.mcalendarview.listeners.OnDateClickListener;\r\nimport sun.bob.mcalendarview.vo.DateData;\r\n\r\npublic class MyToDoFragment extends Fragment implements AddTaskDialogFragment.AddTaskDialogListener {\r\n\r\n    private View listView;\r\n    List<ToDoList> itemList;\r\n    List<ToDoList> lstToDo;\r\n    //firebase\r\n    private DatabaseReference reference = null;\r\n    private String uID;\r\n\r\n    //dialog fragment\r\n    private String task_text;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        //get uid of logged in user\r\n        uID = getActivity().getIntent().getStringExtra(\"USER\");\r\n\r\n        // Inflate the layout for this fragment\r\n        View myToDoview = inflater.inflate(R.layout.fragment_my_to_do, container, false);\r\n\r\n        //firebase database -> get reference to USER table\r\n        reference = FirebaseDatabase.getInstance().getReference().child(\"TODO\");\r\n\r\n        listView = getActivity().findViewById(R.id.activity_event_layout);\r\n        itemList = new ArrayList<>();\r\n        List<TaskList> tasks = new ArrayList<>();\r\n        ToDoList mytodos = new ToDoList(\"My ToDos\", tasks, uID, \"\");\r\n        itemList.add(mytodos);\r\n        final RecyclerView ParentRecyclerViewItem = myToDoview.findViewById(R.id.todo_rec_view);\r\n\r\n        // Initialise the Linear layout manager\r\n        final LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\r\n\r\n        //set data for events example\r\n        lstToDo = new ArrayList<>();\r\n\r\n        //Getting events from database and setting them to recyclerview\r\n        final DatabaseReference databaseTodoRef;\r\n        databaseTodoRef= FirebaseDatabase.getInstance().getReference().child(\"TODO\");\r\n\r\n        //databaseEvents.addValueEventListener(new ValueEventListener() {\r\n        databaseTodoRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                lstToDo.clear();\r\n                for (final DataSnapshot todo : snapshot.getChildren()) {\r\n                    final ToDoList tempTD = new ToDoList();\r\n\r\n                    //Loop 1 to go through all child nodes of events\r\n                    final List<TaskList> tasks =  new ArrayList<>();\r\n                    todo.getRef().child(\"taskList\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                            for (DataSnapshot task : snapshot.getChildren()) {\r\n                                //Loop 1 to go through all child nodes of joined members\r\n                                TaskList task_temp = new TaskList();\r\n                                task_temp.setBelongTo(task.child(\"belongTo\").getValue().toString());\r\n                                if(task_temp.getBelongTo().equals(uID)){\r\n                                    task_temp.setTaskTitle(task.child(\"taskTitle\").getValue().toString());\r\n                                    task_temp.setReferenceTo(task.child(\"referenceTo\").getValue().toString());\r\n                                    String CB = task.child(\"taskCB\").getValue().toString();\r\n                                    boolean cb = false;\r\n                                    if(CB.equals(\"true\")){\r\n                                        cb = true;\r\n                                        Log.d(\"Espania\", \"onDataChange: Ifben vagyok! \" + cb);\r\n                                    }\r\n                                    task_temp.setTaskCB(cb);\r\n                                    Log.d(\"WTF\", \"onDataChange: \" + task_temp.getTaskTitle());\r\n                                    tasks.add(task_temp);\r\n                                }\r\n                            }\r\n\r\n\r\n                            final Handler handler = new Handler();\r\n                            final int delay = 1000; //milliseconds\r\n\r\n                            Log.d(\"WTF\", \"run: Here is Jimmi!\" + tasks.size());\r\n                            handler.postDelayed(new Runnable(){\r\n                                public void run(){\r\n                                    if(!tasks.isEmpty())//checking if the data is loaded or not\r\n                                    {\r\n                                        Log.d(\"WTF\", \"run: Here is Johnny!\");\r\n                                        String td_title = todo.child(\"toDoListTitle\").getValue().toString();\r\n                                        tempTD.setToDoListTitle(td_title);\r\n                                        String td_owner = todo.child(\"owner\").getValue().toString();\r\n                                        tempTD.setOwner(td_owner);\r\n\r\n                                        tempTD.setTaskList(tasks);\r\n\r\n\r\n                                        //pushing the temporary event object into an arraylist\r\n                                        lstToDo.add(tempTD);\r\n                                        // Pass the arguments\r\n                                        // to the parentItemAdapter.\r\n                                        // These arguments are passed\r\n                                        // using a method ParentItemList()\r\n                                        ToDoRecyclerViewAdapter parentItemAdapter = new ToDoRecyclerViewAdapter(lstToDo);\r\n\r\n                                        // Set the layout manager\r\n                                        // and adapter for items\r\n                                        // of the parent recyclerview\r\n                                        ParentRecyclerViewItem.setAdapter(parentItemAdapter);\r\n                                        ParentRecyclerViewItem.setLayoutManager(layoutManager);\r\n                                    }\r\n                                    else\r\n                                        handler.postDelayed(this, delay);\r\n                                }\r\n                            }, delay);\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        Button todo_btn = myToDoview.findViewById(R.id.todo_button);\r\n        todo_btn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                inviteDialogFragment();\r\n                Log.d(\"Espania\", \"onClick: Heyho\");\r\n            }\r\n        });\r\n        return myToDoview;\r\n    }\r\n\r\n    /*private List<ToDoList> toDoList()\r\n    {\r\n        List<ToDoList> itemList = new ArrayList<>();\r\n\r\n        ToDoList item = new ToDoList(\"Title 1\", ChildItemList());\r\n        itemList.add(item);\r\n        ToDoList item1 = new ToDoList(\"Title 2\", ChildItemList());\r\n        itemList.add(item1);\r\n        ToDoList item2 = new ToDoList(\"Title 3\", ChildItemList());\r\n        itemList.add(item2);\r\n        ToDoList item3 = new ToDoList(\"Title 4\", ChildItemList());\r\n        itemList.add(item3);\r\n\r\n        return itemList;\r\n    }\r\n\r\n    // Method to pass the arguments\r\n    // for the elements\r\n    // of child RecyclerView\r\n    private List<TaskList> ChildItemList()\r\n    {\r\n        List<TaskList> ChildItemList = new ArrayList<>();\r\n\r\n        ChildItemList.add(new TaskList(\"Card 1\"));\r\n        ChildItemList.add(new TaskList(\"Card 2\"));\r\n        ChildItemList.add(new TaskList(\"Card 3\"));\r\n        ChildItemList.add(new TaskList(\"Card 4\"));\r\n\r\n        return ChildItemList;\r\n    }*/\r\n\r\n    /*private void addtomyToDoList(List<ToDoList> todos){\r\n        todos.get(0).addToTaskList(new TaskList(\"Elso task\",uID));\r\n    }*/\r\n\r\n    private void pushInMyToDoList(final DatabaseReference reference){\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            int ok = 0;\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for(DataSnapshot todo: snapshot.getChildren()){\r\n                    if(todo.child(\"owner\").getValue().toString().equals(uID) && todo.child(\"toDoListTitle\").getValue().toString().equals(\"My ToDos\")) {\r\n                        ok=1;\r\n                        Log.d(\"Espania\", \"onDataChange: Ifben\");\r\n                        if(todo.child(\"ID\").getValue() == null){\r\n                            todo.child(\"ID\").getRef().setValue(todo.getKey());\r\n                        }\r\n                        Log.d(\"Espania\", \"onDataChange: Itt vagyok!\");\r\n                        todo.child(\"taskList\").getRef().push().setValue(new TaskList(task_text,uID,todo.getKey()));\r\n                    }\r\n                }\r\n                if(ok == 0){\r\n                    ToDoList temp_todo = new ToDoList();\r\n                    temp_todo.setToDoListTitle(\"My ToDos\");\r\n                    temp_todo.setOwner(uID);\r\n                    snapshot.getRef().push().setValue(temp_todo);\r\n                    Log.d(\"Espania\", \"onDataChange: Elseben\");\r\n                    for(DataSnapshot todo: snapshot.getChildren()){\r\n                        if(todo.child(\"owner\").getValue().toString().equals(uID) && todo.child(\"toDoListTitle\").getValue().toString().equals(\"My ToDos\")) {\r\n                            if(todo.child(\"ID\").getValue() == null){\r\n                                todo.child(\"ID\").getRef().setValue(todo.getKey());\r\n                            }\r\n                            Log.d(\"Espania\", \"onDataChange: Itt vagyok!\");\r\n                            todo.child(\"taskList\").getRef().push().setValue(new TaskList(task_text,uID,todo.getKey()));\r\n                        }\r\n                    }\r\n                }\r\n                //Log.d(\"Espania\", \"onDataChange: itt vagyok1!\");\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        listView.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        listView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    public void clearList(){\r\n        lstToDo.clear();\r\n    }\r\n\r\n    @Override\r\n    public void applyText(String taskname) {\r\n        task_text = taskname;\r\n        Log.d(\"Espania\", \"applyText: \" + reference);\r\n        pushInMyToDoList(reference);\r\n    }\r\n\r\n    public void inviteDialogFragment(){\r\n        AddTaskDialogFragment addTaskDialogFragment = new AddTaskDialogFragment();\r\n        addTaskDialogFragment.setListener(MyToDoFragment.this);\r\n        addTaskDialogFragment.setCancelable(true);\r\n        addTaskDialogFragment.show(getActivity().getSupportFragmentManager(),\"AddTaskDialogFragment\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Fragments/MyToDoFragment.java	(date 1609103263844)
@@ -1,6 +1,5 @@
 package com.example.pabs.Fragments;
 
-import android.graphics.Color;
 import android.os.Bundle;
 
 import androidx.annotation.NonNull;
@@ -15,11 +14,9 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 
-import com.example.pabs.Adapters.CalendarRecyclerViewAdapter;
 import com.example.pabs.Adapters.ToDoRecyclerViewAdapter;
-import com.example.pabs.HelperClass.TaskList;
-import com.example.pabs.HelperClass.ToDoList;
-import com.example.pabs.Models.DatabaseEvent;
+import com.example.pabs.Models.TaskList;
+import com.example.pabs.Models.ToDoList;
 import com.example.pabs.R;
 import com.google.firebase.database.DataSnapshot;
 import com.google.firebase.database.DatabaseError;
@@ -30,10 +27,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import sun.bob.mcalendarview.MarkStyle;
-import sun.bob.mcalendarview.listeners.OnDateClickListener;
-import sun.bob.mcalendarview.vo.DateData;
-
 public class MyToDoFragment extends Fragment implements AddTaskDialogFragment.AddTaskDialogListener {
 
     private View listView;
Index: app/src/main/java/com/example/pabs/Adapters/TaskRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Adapters;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CheckBox;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.pabs.HelperClass.TaskList;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.List;\r\n\r\npublic class TaskRecyclerViewAdapter extends RecyclerView.Adapter<TaskRecyclerViewAdapter.MyTaskViewHolder> {\r\n\r\n    private List<TaskList> taskList;\r\n\r\n    // Constuctor\r\n    TaskRecyclerViewAdapter(List<TaskList> taskList)\r\n    {\r\n        this.taskList = taskList;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyTaskViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i)\r\n    {\r\n\r\n        // Here we inflate the corresponding\r\n        // layout of the child item\r\n        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.mytodo_task_row, viewGroup, false);\r\n\r\n        return new MyTaskViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull final MyTaskViewHolder childViewHolder, int position)\r\n    {\r\n        final DatabaseReference referenceDB = FirebaseDatabase.getInstance().getReference().child(\"TODO\");\r\n        // Create an instance of the ChildItem\r\n        // class for the given position\r\n        TaskList childItem = taskList.get(position);\r\n\r\n        // For the created instance, set title.\r\n        // No need to set the image for\r\n        // the ImageViews because we have\r\n        // provided the source for the images\r\n        // in the layout file itself\r\n        childViewHolder.taskTitle.setText(childItem.getTaskTitle());\r\n\r\n        Log.d(\"Espania\", \"onBindViewHolder: Ifen kivül vagyok! \" + childViewHolder.taskCB);\r\n        if((taskList.get(childViewHolder.getAdapterPosition()).getTaskCB())){\r\n            childViewHolder.taskCB.setChecked(true);\r\n            Log.d(\"Espania\", \"onBindViewHolder: Ifben vagyok! \" + childViewHolder.taskCB);\r\n        }\r\n        else{\r\n            childViewHolder.taskCB.setChecked(false);\r\n        }\r\n\r\n        childViewHolder.taskCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, final boolean isChecked) {\r\n                //set your object's last status\r\n                taskList.get(childViewHolder.getAdapterPosition()).setTaskCB(isChecked);\r\n                referenceDB.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for(DataSnapshot todo : snapshot.getChildren()){\r\n                            if(todo.getKey().equals(taskList.get(childViewHolder.getAdapterPosition()).getReferenceTo())){\r\n                                todo.getRef().child(\"taskList\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                        for(DataSnapshot task : snapshot.getChildren()){\r\n                                            if(task.child(\"taskTitle\").getValue().toString().equals(taskList.get(childViewHolder.getAdapterPosition()).getTaskTitle())){\r\n                                                task.child(\"taskCB\").getRef().setValue(isChecked);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount()\r\n    {\r\n        // This method returns the number\r\n        // of items we have added\r\n        // in the ChildItemList\r\n        // i.e. the number of instances\r\n        // of the ChildItemList\r\n        // that have been created\r\n        return taskList.size();\r\n    }\r\n\r\n    // This class is to initialize\r\n    // the Views present\r\n    // in the child RecyclerView\r\n    class MyTaskViewHolder extends RecyclerView.ViewHolder {\r\n        TextView taskTitle;\r\n        CheckBox taskCB;\r\n\r\n        MyTaskViewHolder(View itemView)\r\n        {\r\n            super(itemView);\r\n            taskTitle = itemView.findViewById(R.id.task_task);\r\n            taskCB = itemView.findViewById(R.id.task_cb);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Adapters/TaskRecyclerViewAdapter.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Adapters/TaskRecyclerViewAdapter.java	(date 1609103263809)
@@ -6,13 +6,12 @@
 import android.view.ViewGroup;
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
-import android.widget.RadioGroup;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.example.pabs.HelperClass.TaskList;
+import com.example.pabs.Models.TaskList;
 import com.example.pabs.R;
 import com.google.firebase.database.DataSnapshot;
 import com.google.firebase.database.DatabaseError;
Index: app/src/main/java/com/example/pabs/HelperClass/TaskList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.HelperClass;\r\n\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\n\r\nimport com.google.firebase.database.DatabaseReference;\r\n\r\npublic class TaskList {\r\n    private String taskTitle;\r\n    private boolean taskCB;\r\n    private String belongTo;\r\n    private String ToDoID;\r\n\r\n    public TaskList(){}\r\n\r\n    public TaskList(String taskTitle,String belongTO,String reference) {\r\n        this.taskTitle = taskTitle;\r\n        this.taskCB = false;\r\n        this.belongTo = belongTO;\r\n        this.ToDoID = reference;\r\n    }\r\n\r\n    public String getTaskTitle() {\r\n        return taskTitle;\r\n    }\r\n\r\n    public boolean getTaskCB(){\r\n        return taskCB;\r\n    }\r\n\r\n    public void setTaskTitle(String taskTitle) {\r\n        this.taskTitle = taskTitle;\r\n    }\r\n\r\n    public void setTaskCB(boolean taskcb){\r\n        this.taskCB = taskcb;\r\n    }\r\n\r\n    public String getBelongTo() {\r\n        return belongTo;\r\n    }\r\n\r\n    public void setBelongTo(String belongTo) {\r\n        this.belongTo = belongTo;\r\n    }\r\n\r\n    public String getReferenceTo() {\r\n        return ToDoID;\r\n    }\r\n\r\n    public void setReferenceTo(String referenceto) {\r\n        this.ToDoID = referenceto;\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/example/pabs/HelperClass/TaskList.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Models/TaskList.java	(date 1609103263663)
@@ -1,4 +1,4 @@
-package com.example.pabs.HelperClass;
+package com.example.pabs.Models;
 
 import android.widget.Button;
 import android.widget.CheckBox;
Index: app/src/main/java/com/example/pabs/Fragments/EventFragment/EventRepetitionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.Fragments.EventFragment;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.pabs.Models.DatabaseEvent;\r\nimport com.example.pabs.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class EventRepetitionFragment extends Fragment {\r\n\r\n    private View containerView;\r\n\r\n    //database event\r\n    private final DatabaseEvent databaseEvent;\r\n\r\n    private SwitchCompat sw;\r\n    private ImageView iv;\r\n    private Spinner sp;\r\n    private TextView tv;\r\n    private Button bt;\r\n\r\n    private boolean switch_on = false;\r\n\r\n    EventRepetitionFragment(DatabaseEvent dE) {\r\n        databaseEvent = dE;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_event_repetition, container, false);\r\n        containerView = getActivity().findViewById(R.id.activity_event_layout);\r\n\r\n        sw = view.findViewById(R.id.f_e_rep_sw);\r\n        iv = view.findViewById(R.id.f_e_rep_iv);\r\n        sp = view.findViewById(R.id.f_e_rep_sp);\r\n        tv = view.findViewById(R.id.f_e_rep_rl3_tv);\r\n        bt = view.findViewById(R.id.f_e_rep_btn);\r\n\r\n        iv.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                clearBackstack();\r\n            }\r\n        });\r\n\r\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),\r\n                R.array.repetition, android.R.layout.simple_spinner_item);\r\n        // Specify the layout to use when the list of choices appears\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        sp.setAdapter(adapter);\r\n\r\n        sp.setVisibility(View.GONE);\r\n        tv.setVisibility(View.GONE);\r\n\r\n        if (databaseEvent.getRepetition() != null) {\r\n            if (!databaseEvent.getRepetition().equals(\"\")) {\r\n                sp.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.VISIBLE);\r\n                sw.setChecked(true);\r\n                switch_on = true;\r\n\r\n                ArrayList<String> repetitionArr = new ArrayList<>();\r\n                repetitionArr.add(\"daily\");\r\n                repetitionArr.add(\"weekly\");\r\n                repetitionArr.add(\"monthly\");\r\n                int i = repetitionArr.indexOf(databaseEvent.getRepetition());\r\n                sp.setSelection(i);\r\n            }\r\n        }\r\n\r\n\r\n        sw.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                if (isChecked) {\r\n                    //switch on\r\n                    sp.setVisibility(View.VISIBLE);\r\n                    tv.setVisibility(View.VISIBLE);\r\n                    switch_on = true;\r\n                } else {\r\n                    //switch off\r\n                    sp.setVisibility(View.GONE);\r\n                    tv.setVisibility(View.GONE);\r\n                    switch_on = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        bt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final DatabaseReference refEvent = FirebaseDatabase.getInstance().getReference().child(\"EVENT\");\r\n                refEvent.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (final DataSnapshot event : snapshot.getChildren()) {\r\n                            //Loop 1 to go through all child nodes of users\r\n                            if (event.child(\"event_name\").getValue() == databaseEvent.getEvent_name()) {\r\n                                if (switch_on) {\r\n                                    databaseEvent.setRepetition(sp.getSelectedItem().toString());\r\n                                } else {\r\n                                    databaseEvent.setRepetition(\"\");\r\n                                }\r\n                                event.getRef().child(\"repetition\").setValue(databaseEvent.getRepetition());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n                        //database failed\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n\r\n    /**\r\n     * clearBackstack\r\n     */\r\n    public void clearBackstack() {\r\n        //clear all backstact\r\n        getActivity().getSupportFragmentManager().popBackStack(\"EventRepetitionFragment\", 1);\r\n    }\r\n\r\n    /**\r\n     * onStart\r\n     */\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        //Hiding the activity layout\r\n        containerView.setVisibility(View.GONE);\r\n    }\r\n\r\n    /**\r\n     * onStop\r\n     */\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        containerView.setVisibility(View.VISIBLE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pabs/Fragments/EventFragment/EventRepetitionFragment.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Fragments/EventFragment/EventRepetitionFragment.java	(date 1609112135273)
@@ -10,6 +10,7 @@
 import android.widget.ImageView;
 import android.widget.Spinner;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.widget.SwitchCompat;
@@ -119,17 +120,23 @@
                 refEvent.addListenerForSingleValueEvent(new ValueEventListener() {
                     @Override
                     public void onDataChange(@NonNull DataSnapshot snapshot) {
-                        for (final DataSnapshot event : snapshot.getChildren()) {
-                            //Loop 1 to go through all child nodes of users
-                            if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
-                                if (switch_on) {
-                                    databaseEvent.setRepetition(sp.getSelectedItem().toString());
-                                } else {
-                                    databaseEvent.setRepetition("");
-                                }
-                                event.getRef().child("repetition").setValue(databaseEvent.getRepetition());
+                        if(snapshot.exists()){
+                            for (final DataSnapshot event : snapshot.getChildren()) {
+                                //Loop 1 to go through all child nodes of users
+                                if (event.child("event_name").getValue() == databaseEvent.getEvent_name()) {
+                                    if (switch_on) {
+                                        databaseEvent.setRepetition(sp.getSelectedItem().toString());
+                                    } else {
+                                        databaseEvent.setRepetition("");
+                                    }
+                                    event.getRef().child("repetition").setValue(databaseEvent.getRepetition());
+                                }
                             }
                         }
+                        else{
+                            Toast.makeText(getActivity(), "Event has been deleted!", Toast.LENGTH_SHORT).show();
+                        }
+
                     }
 
                     @Override
Index: app/src/main/java/com/example/pabs/HelperClass/ToDoList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pabs.HelperClass;\r\n\r\nimport java.util.List;\r\n\r\npublic class ToDoList {\r\n    private String ID;\r\n    private String owner;\r\n    private String toDoListTitle;\r\n    private List<TaskList> taskList;\r\n\r\n    public ToDoList() {}\r\n\r\n    public ToDoList(String toDoListTitle, List<TaskList> taskList, String owner, String id) {\r\n        this.toDoListTitle = toDoListTitle;\r\n        this.taskList = taskList;\r\n        this.owner = owner;\r\n        this.ID = id;\r\n    }\r\n\r\n    public String getToDoListTitle() {\r\n        return toDoListTitle;\r\n    }\r\n\r\n    public void setToDoListTitle(String toDoListTitle) {\r\n        this.toDoListTitle = toDoListTitle;\r\n    }\r\n\r\n    public List<TaskList> getTaskList() {\r\n        return taskList;\r\n    }\r\n\r\n    public void setTaskList(List<TaskList> taskList) {\r\n        this.taskList = taskList;\r\n    }\r\n\r\n    public void addToTaskList(TaskList task){\r\n        this.taskList.add(task);\r\n    }\r\n\r\n    public String getOwner(){\r\n        return this.owner;\r\n    }\r\n\r\n    public void setOwner(String owner){\r\n        this.owner = owner;\r\n    }\r\n\r\n    public String getID() {\r\n        return ID;\r\n    }\r\n\r\n    public void setID(String ID) {\r\n        this.ID = ID;\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/example/pabs/HelperClass/ToDoList.java	(revision f6992efffaf7049d155328e71328e4ce0861002b)
+++ app/src/main/java/com/example/pabs/Models/ToDoList.java	(date 1609103263648)
@@ -1,4 +1,4 @@
-package com.example.pabs.HelperClass;
+package com.example.pabs.Models;
 
 import java.util.List;
 
